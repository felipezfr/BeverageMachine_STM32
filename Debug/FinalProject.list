
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e98  08005e98  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  08005e98  08005e98  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e98  08005e98  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08005ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000118  08005fb4  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005fb4  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8a7  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002599  00000000  00000000  0002d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002ff80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003641  00000000  00000000  00031798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cfe9  00000000  00000000  00034dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db3d  00000000  00000000  00041dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  000cf97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000118 	.word	0x20000118
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ce8 	.word	0x08005ce8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000011c 	.word	0x2000011c
 8000148:	08005ce8 	.word	0x08005ce8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_frsub>:
 8000928:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800092c:	e002      	b.n	8000934 <__addsf3>
 800092e:	bf00      	nop

08000930 <__aeabi_fsub>:
 8000930:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000934 <__addsf3>:
 8000934:	0042      	lsls	r2, r0, #1
 8000936:	bf1f      	itttt	ne
 8000938:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800093c:	ea92 0f03 	teqne	r2, r3
 8000940:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000944:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000948:	d06a      	beq.n	8000a20 <__addsf3+0xec>
 800094a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800094e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000952:	bfc1      	itttt	gt
 8000954:	18d2      	addgt	r2, r2, r3
 8000956:	4041      	eorgt	r1, r0
 8000958:	4048      	eorgt	r0, r1
 800095a:	4041      	eorgt	r1, r0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	2b19      	cmp	r3, #25
 8000962:	bf88      	it	hi
 8000964:	4770      	bxhi	lr
 8000966:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800096e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000972:	bf18      	it	ne
 8000974:	4240      	negne	r0, r0
 8000976:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800097e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4249      	negne	r1, r1
 8000986:	ea92 0f03 	teq	r2, r3
 800098a:	d03f      	beq.n	8000a0c <__addsf3+0xd8>
 800098c:	f1a2 0201 	sub.w	r2, r2, #1
 8000990:	fa41 fc03 	asr.w	ip, r1, r3
 8000994:	eb10 000c 	adds.w	r0, r0, ip
 8000998:	f1c3 0320 	rsb	r3, r3, #32
 800099c:	fa01 f103 	lsl.w	r1, r1, r3
 80009a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a4:	d502      	bpl.n	80009ac <__addsf3+0x78>
 80009a6:	4249      	negs	r1, r1
 80009a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b0:	d313      	bcc.n	80009da <__addsf3+0xa6>
 80009b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b6:	d306      	bcc.n	80009c6 <__addsf3+0x92>
 80009b8:	0840      	lsrs	r0, r0, #1
 80009ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80009be:	f102 0201 	add.w	r2, r2, #1
 80009c2:	2afe      	cmp	r2, #254	; 0xfe
 80009c4:	d251      	bcs.n	8000a6a <__addsf3+0x136>
 80009c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ce:	bf08      	it	eq
 80009d0:	f020 0001 	biceq.w	r0, r0, #1
 80009d4:	ea40 0003 	orr.w	r0, r0, r3
 80009d8:	4770      	bx	lr
 80009da:	0049      	lsls	r1, r1, #1
 80009dc:	eb40 0000 	adc.w	r0, r0, r0
 80009e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e4:	f1a2 0201 	sub.w	r2, r2, #1
 80009e8:	d1ed      	bne.n	80009c6 <__addsf3+0x92>
 80009ea:	fab0 fc80 	clz	ip, r0
 80009ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f2:	ebb2 020c 	subs.w	r2, r2, ip
 80009f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fa:	bfaa      	itet	ge
 80009fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a00:	4252      	neglt	r2, r2
 8000a02:	4318      	orrge	r0, r3
 8000a04:	bfbc      	itt	lt
 8000a06:	40d0      	lsrlt	r0, r2
 8000a08:	4318      	orrlt	r0, r3
 8000a0a:	4770      	bx	lr
 8000a0c:	f092 0f00 	teq	r2, #0
 8000a10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a14:	bf06      	itte	eq
 8000a16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1a:	3201      	addeq	r2, #1
 8000a1c:	3b01      	subne	r3, #1
 8000a1e:	e7b5      	b.n	800098c <__addsf3+0x58>
 8000a20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2e:	d021      	beq.n	8000a74 <__addsf3+0x140>
 8000a30:	ea92 0f03 	teq	r2, r3
 8000a34:	d004      	beq.n	8000a40 <__addsf3+0x10c>
 8000a36:	f092 0f00 	teq	r2, #0
 8000a3a:	bf08      	it	eq
 8000a3c:	4608      	moveq	r0, r1
 8000a3e:	4770      	bx	lr
 8000a40:	ea90 0f01 	teq	r0, r1
 8000a44:	bf1c      	itt	ne
 8000a46:	2000      	movne	r0, #0
 8000a48:	4770      	bxne	lr
 8000a4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a4e:	d104      	bne.n	8000a5a <__addsf3+0x126>
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	bf28      	it	cs
 8000a54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	4770      	bx	lr
 8000a5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a5e:	bf3c      	itt	cc
 8000a60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a64:	4770      	bxcc	lr
 8000a66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a78:	bf16      	itet	ne
 8000a7a:	4608      	movne	r0, r1
 8000a7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a80:	4601      	movne	r1, r0
 8000a82:	0242      	lsls	r2, r0, #9
 8000a84:	bf06      	itte	eq
 8000a86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8a:	ea90 0f01 	teqeq	r0, r1
 8000a8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_ui2f>:
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e004      	b.n	8000aa4 <__aeabi_i2f+0x8>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_i2f>:
 8000a9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa0:	bf48      	it	mi
 8000aa2:	4240      	negmi	r0, r0
 8000aa4:	ea5f 0c00 	movs.w	ip, r0
 8000aa8:	bf08      	it	eq
 8000aaa:	4770      	bxeq	lr
 8000aac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	e01c      	b.n	8000af2 <__aeabi_l2f+0x2a>

08000ab8 <__aeabi_ul2f>:
 8000ab8:	ea50 0201 	orrs.w	r2, r0, r1
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e00a      	b.n	8000adc <__aeabi_l2f+0x14>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_l2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad4:	d502      	bpl.n	8000adc <__aeabi_l2f+0x14>
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000adc:	ea5f 0c01 	movs.w	ip, r1
 8000ae0:	bf02      	ittt	eq
 8000ae2:	4684      	moveq	ip, r0
 8000ae4:	4601      	moveq	r1, r0
 8000ae6:	2000      	moveq	r0, #0
 8000ae8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aec:	bf08      	it	eq
 8000aee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000af6:	fabc f28c 	clz	r2, ip
 8000afa:	3a08      	subs	r2, #8
 8000afc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b00:	db10      	blt.n	8000b24 <__aeabi_l2f+0x5c>
 8000b02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b06:	4463      	add	r3, ip
 8000b08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b0c:	f1c2 0220 	rsb	r2, r2, #32
 8000b10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b14:	fa20 f202 	lsr.w	r2, r0, r2
 8000b18:	eb43 0002 	adc.w	r0, r3, r2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f102 0220 	add.w	r2, r2, #32
 8000b28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2c:	f1c2 0220 	rsb	r2, r2, #32
 8000b30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b34:	fa21 f202 	lsr.w	r2, r1, r2
 8000b38:	eb43 0002 	adc.w	r0, r3, r2
 8000b3c:	bf08      	it	eq
 8000b3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_fmul>:
 8000b44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b52:	ea92 0f0c 	teqne	r2, ip
 8000b56:	ea93 0f0c 	teqne	r3, ip
 8000b5a:	d06f      	beq.n	8000c3c <__aeabi_fmul+0xf8>
 8000b5c:	441a      	add	r2, r3
 8000b5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b62:	0240      	lsls	r0, r0, #9
 8000b64:	bf18      	it	ne
 8000b66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6a:	d01e      	beq.n	8000baa <__aeabi_fmul+0x66>
 8000b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b78:	fba0 3101 	umull	r3, r1, r0, r1
 8000b7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b84:	bf3e      	ittt	cc
 8000b86:	0049      	lslcc	r1, r1, #1
 8000b88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	ea40 0001 	orr.w	r0, r0, r1
 8000b92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b96:	2afd      	cmp	r2, #253	; 0xfd
 8000b98:	d81d      	bhi.n	8000bd6 <__aeabi_fmul+0x92>
 8000b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	4770      	bx	lr
 8000baa:	f090 0f00 	teq	r0, #0
 8000bae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb2:	bf08      	it	eq
 8000bb4:	0249      	lsleq	r1, r1, #9
 8000bb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bbe:	3a7f      	subs	r2, #127	; 0x7f
 8000bc0:	bfc2      	ittt	gt
 8000bc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bca:	4770      	bxgt	lr
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	dc5d      	bgt.n	8000c94 <__aeabi_fmul+0x150>
 8000bd8:	f112 0f19 	cmn.w	r2, #25
 8000bdc:	bfdc      	itt	le
 8000bde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be2:	4770      	bxle	lr
 8000be4:	f1c2 0200 	rsb	r2, r2, #0
 8000be8:	0041      	lsls	r1, r0, #1
 8000bea:	fa21 f102 	lsr.w	r1, r1, r2
 8000bee:	f1c2 0220 	rsb	r2, r2, #32
 8000bf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfa:	f140 0000 	adc.w	r0, r0, #0
 8000bfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c02:	bf08      	it	eq
 8000c04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c08:	4770      	bx	lr
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fmul+0xce>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fmul+0xe6>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e78f      	b.n	8000b5c <__aeabi_fmul+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	bf18      	it	ne
 8000c46:	ea93 0f0c 	teqne	r3, ip
 8000c4a:	d00a      	beq.n	8000c62 <__aeabi_fmul+0x11e>
 8000c4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c50:	bf18      	it	ne
 8000c52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c56:	d1d8      	bne.n	8000c0a <__aeabi_fmul+0xc6>
 8000c58:	ea80 0001 	eor.w	r0, r0, r1
 8000c5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f090 0f00 	teq	r0, #0
 8000c66:	bf17      	itett	ne
 8000c68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	f091 0f00 	teqne	r1, #0
 8000c72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c76:	d014      	beq.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c78:	ea92 0f0c 	teq	r2, ip
 8000c7c:	d101      	bne.n	8000c82 <__aeabi_fmul+0x13e>
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	d10f      	bne.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c82:	ea93 0f0c 	teq	r3, ip
 8000c86:	d103      	bne.n	8000c90 <__aeabi_fmul+0x14c>
 8000c88:	024b      	lsls	r3, r1, #9
 8000c8a:	bf18      	it	ne
 8000c8c:	4608      	movne	r0, r1
 8000c8e:	d108      	bne.n	8000ca2 <__aeabi_fmul+0x15e>
 8000c90:	ea80 0001 	eor.w	r0, r0, r1
 8000c94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bx	lr

08000cac <__aeabi_fdiv>:
 8000cac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cba:	ea92 0f0c 	teqne	r2, ip
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d069      	beq.n	8000d98 <__aeabi_fdiv+0xec>
 8000cc4:	eba2 0203 	sub.w	r2, r2, r3
 8000cc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd2:	d037      	beq.n	8000d44 <__aeabi_fdiv+0x98>
 8000cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cdc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	bf38      	it	cc
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	bf24      	itt	cs
 8000cf6:	1a5b      	subcs	r3, r3, r1
 8000cf8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d0e:	bf24      	itt	cs
 8000d10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d2e:	d1e0      	bne.n	8000cf2 <__aeabi_fdiv+0x46>
 8000d30:	2afd      	cmp	r2, #253	; 0xfd
 8000d32:	f63f af50 	bhi.w	8000bd6 <__aeabi_fmul+0x92>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4c:	327f      	adds	r2, #127	; 0x7f
 8000d4e:	bfc2      	ittt	gt
 8000d50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d58:	4770      	bxgt	lr
 8000d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	3a01      	subs	r2, #1
 8000d64:	e737      	b.n	8000bd6 <__aeabi_fmul+0x92>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fdiv+0xc2>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fdiv+0xda>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e795      	b.n	8000cc4 <__aeabi_fdiv+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d108      	bne.n	8000db4 <__aeabi_fdiv+0x108>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	f47f af7d 	bne.w	8000ca2 <__aeabi_fmul+0x15e>
 8000da8:	ea93 0f0c 	teq	r3, ip
 8000dac:	f47f af70 	bne.w	8000c90 <__aeabi_fmul+0x14c>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e776      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000db4:	ea93 0f0c 	teq	r3, ip
 8000db8:	d104      	bne.n	8000dc4 <__aeabi_fdiv+0x118>
 8000dba:	024b      	lsls	r3, r1, #9
 8000dbc:	f43f af4c 	beq.w	8000c58 <__aeabi_fmul+0x114>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e76e      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000dc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc8:	bf18      	it	ne
 8000dca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dce:	d1ca      	bne.n	8000d66 <__aeabi_fdiv+0xba>
 8000dd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd4:	f47f af5c 	bne.w	8000c90 <__aeabi_fmul+0x14c>
 8000dd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	f47f af3c 	bne.w	8000c58 <__aeabi_fmul+0x114>
 8000de0:	e75f      	b.n	8000ca2 <__aeabi_fmul+0x15e>
 8000de2:	bf00      	nop

08000de4 <__gesf2>:
 8000de4:	f04f 3cff 	mov.w	ip, #4294967295
 8000de8:	e006      	b.n	8000df8 <__cmpsf2+0x4>
 8000dea:	bf00      	nop

08000dec <__lesf2>:
 8000dec:	f04f 0c01 	mov.w	ip, #1
 8000df0:	e002      	b.n	8000df8 <__cmpsf2+0x4>
 8000df2:	bf00      	nop

08000df4 <__cmpsf2>:
 8000df4:	f04f 0c01 	mov.w	ip, #1
 8000df8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000dfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e08:	bf18      	it	ne
 8000e0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e0e:	d011      	beq.n	8000e34 <__cmpsf2+0x40>
 8000e10:	b001      	add	sp, #4
 8000e12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e16:	bf18      	it	ne
 8000e18:	ea90 0f01 	teqne	r0, r1
 8000e1c:	bf58      	it	pl
 8000e1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e22:	bf88      	it	hi
 8000e24:	17c8      	asrhi	r0, r1, #31
 8000e26:	bf38      	it	cc
 8000e28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e2c:	bf18      	it	ne
 8000e2e:	f040 0001 	orrne.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e38:	d102      	bne.n	8000e40 <__cmpsf2+0x4c>
 8000e3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e3e:	d105      	bne.n	8000e4c <__cmpsf2+0x58>
 8000e40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e44:	d1e4      	bne.n	8000e10 <__cmpsf2+0x1c>
 8000e46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4a:	d0e1      	beq.n	8000e10 <__cmpsf2+0x1c>
 8000e4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <__aeabi_cfrcmple>:
 8000e54:	4684      	mov	ip, r0
 8000e56:	4608      	mov	r0, r1
 8000e58:	4661      	mov	r1, ip
 8000e5a:	e7ff      	b.n	8000e5c <__aeabi_cfcmpeq>

08000e5c <__aeabi_cfcmpeq>:
 8000e5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e5e:	f7ff ffc9 	bl	8000df4 <__cmpsf2>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	bf48      	it	mi
 8000e66:	f110 0f00 	cmnmi.w	r0, #0
 8000e6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e6c <__aeabi_fcmpeq>:
 8000e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e70:	f7ff fff4 	bl	8000e5c <__aeabi_cfcmpeq>
 8000e74:	bf0c      	ite	eq
 8000e76:	2001      	moveq	r0, #1
 8000e78:	2000      	movne	r0, #0
 8000e7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7e:	bf00      	nop

08000e80 <__aeabi_fcmplt>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff ffea 	bl	8000e5c <__aeabi_cfcmpeq>
 8000e88:	bf34      	ite	cc
 8000e8a:	2001      	movcc	r0, #1
 8000e8c:	2000      	movcs	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmple>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffe0 	bl	8000e5c <__aeabi_cfcmpeq>
 8000e9c:	bf94      	ite	ls
 8000e9e:	2001      	movls	r0, #1
 8000ea0:	2000      	movhi	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmpge>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffd2 	bl	8000e54 <__aeabi_cfrcmple>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpgt>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffc8 	bl	8000e54 <__aeabi_cfrcmple>
 8000ec4:	bf34      	ite	cc
 8000ec6:	2001      	movcc	r0, #1
 8000ec8:	2000      	movcs	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_f2iz>:
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ed8:	d30f      	bcc.n	8000efa <__aeabi_f2iz+0x2a>
 8000eda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ede:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee2:	d90d      	bls.n	8000f00 <__aeabi_f2iz+0x30>
 8000ee4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ef0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef4:	bf18      	it	ne
 8000ef6:	4240      	negne	r0, r0
 8000ef8:	4770      	bx	lr
 8000efa:	f04f 0000 	mov.w	r0, #0
 8000efe:	4770      	bx	lr
 8000f00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f04:	d101      	bne.n	8000f0a <__aeabi_f2iz+0x3a>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d105      	bne.n	8000f16 <__aeabi_f2iz+0x46>
 8000f0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f0e:	bf08      	it	eq
 8000f10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_f2uiz>:
 8000f1c:	0042      	lsls	r2, r0, #1
 8000f1e:	d20e      	bcs.n	8000f3e <__aeabi_f2uiz+0x22>
 8000f20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f24:	d30b      	bcc.n	8000f3e <__aeabi_f2uiz+0x22>
 8000f26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f2e:	d409      	bmi.n	8000f44 <__aeabi_f2uiz+0x28>
 8000f30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f38:	fa23 f002 	lsr.w	r0, r3, r2
 8000f3c:	4770      	bx	lr
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4770      	bx	lr
 8000f44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f48:	d101      	bne.n	8000f4e <__aeabi_f2uiz+0x32>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_f2uiz+0x38>
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <pwmBomba>:
/**
  * @brief Aciona o PWM da bomba, rampa de subida a 0.2s e decida a 0.25s
  * @retval
  */
void pwmBomba()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
      int i = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]

      for (i = 0; i <= MAX_DUTY_CYCLE_VALUE; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	e009      	b.n	8000f80 <pwmBomba+0x24>
      {
            TIM2->CCR1 = i;
 8000f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6353      	str	r3, [r2, #52]	; 0x34
            HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 fd6b 	bl	8002a50 <HAL_Delay>
      for (i = 0; i <= MAX_DUTY_CYCLE_VALUE; i++)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2bfa      	cmp	r3, #250	; 0xfa
 8000f84:	ddf2      	ble.n	8000f6c <pwmBomba+0x10>
      }
      for (i = MAX_DUTY_CYCLE_VALUE; i >= 0; i--)
 8000f86:	23fa      	movs	r3, #250	; 0xfa
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e009      	b.n	8000fa0 <pwmBomba+0x44>
      {
            TIM2->CCR1 = i;
 8000f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
            HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fd5b 	bl	8002a50 <HAL_Delay>
      for (i = MAX_DUTY_CYCLE_VALUE; i >= 0; i--)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	daf2      	bge.n	8000f8c <pwmBomba+0x30>
      }
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <lerSensorCapsulas>:
/**
  * @brief Le o sensor de capsulas
  * @retval retorna a receita equivalente aos pinos
  */
Receita lerSensorCapsulas()
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  int bit0 = HAL_GPIO_ReadPin(CAPSULA_BIT_0_PORT, CAPSULA_BIT_0);
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	484c      	ldr	r0, [pc, #304]	; (80010f0 <lerSensorCapsulas+0x140>)
 8000fbe:	f002 fec3 	bl	8003d48 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]
  int bit1 = HAL_GPIO_ReadPin(CAPSULA_BIT_1_PORT, CAPSULA_BIT_1);
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	484a      	ldr	r0, [pc, #296]	; (80010f4 <lerSensorCapsulas+0x144>)
 8000fcc:	f002 febc 	bl	8003d48 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	613b      	str	r3, [r7, #16]
  int bit2 = HAL_GPIO_ReadPin(CAPSULA_BIT_2_PORT, CAPSULA_BIT_2);
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	4846      	ldr	r0, [pc, #280]	; (80010f4 <lerSensorCapsulas+0x144>)
 8000fda:	f002 feb5 	bl	8003d48 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60fb      	str	r3, [r7, #12]

  if (bit2 == 0 && bit1 == 0 && bit0 == 0)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d110      	bne.n	800100a <lerSensorCapsulas+0x5a>
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <lerSensorCapsulas+0x5a>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10a      	bne.n	800100a <lerSensorCapsulas+0x5a>
  {
    return CAPSULA_nao_inserida;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <lerSensorCapsulas+0x148>)
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	4615      	mov	r5, r2
 8000ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001000:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001008:	e06d      	b.n	80010e6 <lerSensorCapsulas+0x136>
  }
  if (bit2 == 0 && bit1 == 0 && bit0 == 1)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d110      	bne.n	8001032 <lerSensorCapsulas+0x82>
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10d      	bne.n	8001032 <lerSensorCapsulas+0x82>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d10a      	bne.n	8001032 <lerSensorCapsulas+0x82>
  {
    return CAPSULA_agua;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <lerSensorCapsulas+0x14c>)
 8001020:	461c      	mov	r4, r3
 8001022:	4615      	mov	r5, r2
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001030:	e059      	b.n	80010e6 <lerSensorCapsulas+0x136>
  }
  if (bit2 == 0 && bit1 == 1 && bit0 == 0)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d110      	bne.n	800105a <lerSensorCapsulas+0xaa>
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10d      	bne.n	800105a <lerSensorCapsulas+0xaa>
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10a      	bne.n	800105a <lerSensorCapsulas+0xaa>
  {
    return CAPSULA_agua_com_gas;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <lerSensorCapsulas+0x150>)
 8001048:	461c      	mov	r4, r3
 800104a:	4615      	mov	r5, r2
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001058:	e045      	b.n	80010e6 <lerSensorCapsulas+0x136>
  }
  if (bit2 == 0 && bit1 == 1 && bit0 == 1)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d110      	bne.n	8001082 <lerSensorCapsulas+0xd2>
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10d      	bne.n	8001082 <lerSensorCapsulas+0xd2>
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d10a      	bne.n	8001082 <lerSensorCapsulas+0xd2>
  {
    return CAPSULA_cha_gelado;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <lerSensorCapsulas+0x154>)
 8001070:	461c      	mov	r4, r3
 8001072:	4615      	mov	r5, r2
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800107c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001080:	e031      	b.n	80010e6 <lerSensorCapsulas+0x136>
  }
  if (bit2 == 1 && bit1 == 0 && bit0 == 0)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d110      	bne.n	80010aa <lerSensorCapsulas+0xfa>
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10d      	bne.n	80010aa <lerSensorCapsulas+0xfa>
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10a      	bne.n	80010aa <lerSensorCapsulas+0xfa>
  {
    return CAPSULA_cha_quente;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <lerSensorCapsulas+0x158>)
 8001098:	461c      	mov	r4, r3
 800109a:	4615      	mov	r5, r2
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010a8:	e01d      	b.n	80010e6 <lerSensorCapsulas+0x136>
    //return CAPSULA_refrigerante;
  }
  if (bit2 == 1 && bit1 == 0 && bit0 == 1)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d110      	bne.n	80010d2 <lerSensorCapsulas+0x122>
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <lerSensorCapsulas+0x122>
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10a      	bne.n	80010d2 <lerSensorCapsulas+0x122>
  {
    return CAPSULA_refrigerante;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <lerSensorCapsulas+0x15c>)
 80010c0:	461c      	mov	r4, r3
 80010c2:	4615      	mov	r5, r2
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010d0:	e009      	b.n	80010e6 <lerSensorCapsulas+0x136>
  }

  return CAPSULA_nao_inserida;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <lerSensorCapsulas+0x148>)
 80010d6:	461c      	mov	r4, r3
 80010d8:	4615      	mov	r5, r2
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	20000134 	.word	0x20000134
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000020 	.word	0x20000020
 8001104:	20000040 	.word	0x20000040
 8001108:	20000060 	.word	0x20000060
 800110c:	20000080 	.word	0x20000080

08001110 <capsulaInserida>:
  * @brief Exibe tela de inicio de preparo
  * @retval 1 quando o preparo foi terminado
  * @retval 0 quando o preparo nao foi terminado
  */
int capsulaInserida(Receita CAPSULA)
{
 8001110:	b084      	sub	sp, #16
 8001112:	b590      	push	{r4, r7, lr}
 8001114:	b097      	sub	sp, #92	; 0x5c
 8001116:	af04      	add	r7, sp, #16
 8001118:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800111c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  char text[16];
  char tipoAgua[3][16];

  sprintf(tipoAgua[0], "%s", "Quente  S:Inici");
 8001120:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <capsulaInserida+0x248>)
 8001122:	463c      	mov	r4, r7
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sprintf(tipoAgua[1], "%s", "Natural S:Inici");
 800112a:	4b8c      	ldr	r3, [pc, #560]	; (800135c <capsulaInserida+0x24c>)
 800112c:	f107 0410 	add.w	r4, r7, #16
 8001130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sprintf(tipoAgua[2], "%s", "Gelada  S:Inici");
 8001136:	4b8a      	ldr	r3, [pc, #552]	; (8001360 <capsulaInserida+0x250>)
 8001138:	f107 0420 	add.w	r4, r7, #32
 800113c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  lcd_clear();
 8001142:	f000 fcc1 	bl	8001ac8 <lcd_clear>
  sprintf(text, "%s", CAPSULA.nomeCapsula);
 8001146:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f9cf 	bl	80054f4 <strcpy>
  lcd_set_cursor(0, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f000 fc27 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 800115e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fcb7 	bl	8001ad6 <lcd_write_string>

  if (CAPSULA.tipoCapsula == CAPSULA_AGUA)
 8001168:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800116c:	2b01      	cmp	r3, #1
 800116e:	d111      	bne.n	8001194 <capsulaInserida+0x84>
  {
    sprintf(text, "+/-:MudarTemp");
 8001170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001174:	4a7b      	ldr	r2, [pc, #492]	; (8001364 <capsulaInserida+0x254>)
 8001176:	461c      	mov	r4, r3
 8001178:	4613      	mov	r3, r2
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	c407      	stmia	r4!, {r0, r1, r2}
 800117e:	8023      	strh	r3, [r4, #0]
    lcd_set_cursor(1, 0);
 8001180:	2100      	movs	r1, #0
 8001182:	2001      	movs	r0, #1
 8001184:	f000 fc12 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 8001188:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fca2 	bl	8001ad6 <lcd_write_string>
 8001192:	e013      	b.n	80011bc <capsulaInserida+0xac>
  }
  else
  {
    sprintf(text, "C:canc,S:Inici");
 8001194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001198:	4a73      	ldr	r2, [pc, #460]	; (8001368 <capsulaInserida+0x258>)
 800119a:	461c      	mov	r4, r3
 800119c:	4613      	mov	r3, r2
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	c407      	stmia	r4!, {r0, r1, r2}
 80011a2:	8023      	strh	r3, [r4, #0]
 80011a4:	3402      	adds	r4, #2
 80011a6:	0c1b      	lsrs	r3, r3, #16
 80011a8:	7023      	strb	r3, [r4, #0]
    lcd_set_cursor(1, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fbfd 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fc8d 	bl	8001ad6 <lcd_write_string>
  }

  int btn = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  int cont = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  do
  {
    btn = ler_teclado();
 80011c4:	f001 fb62 	bl	800288c <ler_teclado>
 80011c8:	6438      	str	r0, [r7, #64]	; 0x40
    switch (btn)
 80011ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011cc:	3b01      	subs	r3, #1
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f200 80b0 	bhi.w	8001334 <capsulaInserida+0x224>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <capsulaInserida+0xcc>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	0800127b 	.word	0x0800127b
 80011e8:	08001315 	.word	0x08001315
    {
    case 1: //Volta para o relogio
      return 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e0ac      	b.n	800134a <capsulaInserida+0x23a>
      break;
    case 2:
      if (CAPSULA.tipoCapsula == CAPSULA_AGUA)//Capsula de agua, usuario seleciona tipo de agua desejada
 80011f0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	f040 809a 	bne.w	800132e <capsulaInserida+0x21e>
      {
        lcd_clear();
 80011fa:	f000 fc65 	bl	8001ac8 <lcd_clear>
        sprintf(text, "%s", CAPSULA.nomeCapsula);
 80011fe:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f004 f973 	bl	80054f4 <strcpy>
        lcd_set_cursor(0, 0);
 800120e:	2100      	movs	r1, #0
 8001210:	2000      	movs	r0, #0
 8001212:	f000 fbcb 	bl	80019ac <lcd_set_cursor>
        lcd_write_string(text);
 8001216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fc5b 	bl	8001ad6 <lcd_write_string>

        sprintf(text, "%s", tipoAgua[cont]);
 8001220:	463a      	mov	r2, r7
 8001222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	441a      	add	r2, r3
 8001228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f004 f960 	bl	80054f4 <strcpy>
        lcd_set_cursor(1, 0);
 8001234:	2100      	movs	r1, #0
 8001236:	2001      	movs	r0, #1
 8001238:	f000 fbb8 	bl	80019ac <lcd_set_cursor>
        lcd_write_string(text);
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fc48 	bl	8001ad6 <lcd_write_string>

        switch (cont)//Temperatura da agua de acordo com a selecao do usuario
 8001246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001248:	2b01      	cmp	r3, #1
 800124a:	d007      	beq.n	800125c <capsulaInserida+0x14c>
 800124c:	2b02      	cmp	r3, #2
 800124e:	d008      	beq.n	8001262 <capsulaInserida+0x152>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d000      	beq.n	8001256 <capsulaInserida+0x146>
        case 2:
          CAPSULA.temperaturaAgua = 15;
          break;

        default:
          break;
 8001254:	e008      	b.n	8001268 <capsulaInserida+0x158>
          CAPSULA.temperaturaAgua = 60;
 8001256:	233c      	movs	r3, #60	; 0x3c
 8001258:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 800125a:	e005      	b.n	8001268 <capsulaInserida+0x158>
          CAPSULA.temperaturaAgua = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8001260:	e002      	b.n	8001268 <capsulaInserida+0x158>
          CAPSULA.temperaturaAgua = 15;
 8001262:	230f      	movs	r3, #15
 8001264:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8001266:	bf00      	nop
        }

        cont--;
 8001268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126a:	3b01      	subs	r3, #1
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
        if (cont < 0)//Volta para o primeiro tipo de agua
 800126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001270:	2b00      	cmp	r3, #0
 8001272:	da5c      	bge.n	800132e <capsulaInserida+0x21e>
          cont = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
      }

      break;
 8001278:	e059      	b.n	800132e <capsulaInserida+0x21e>
    case 3:
      if (CAPSULA.tipoCapsula == CAPSULA_AGUA)//Capsula de agua, usuario seleciona tipo de agua desejada
 800127a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800127e:	2b01      	cmp	r3, #1
 8001280:	d157      	bne.n	8001332 <capsulaInserida+0x222>
      {
        lcd_clear();
 8001282:	f000 fc21 	bl	8001ac8 <lcd_clear>
        sprintf(text, "%s", CAPSULA.nomeCapsula);
 8001286:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800128a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f92f 	bl	80054f4 <strcpy>
        lcd_set_cursor(0, 0);
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fb87 	bl	80019ac <lcd_set_cursor>
        lcd_write_string(text);
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fc17 	bl	8001ad6 <lcd_write_string>
        sprintf(text, "%s", tipoAgua[cont]);
 80012a8:	463a      	mov	r2, r7
 80012aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	441a      	add	r2, r3
 80012b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 f91c 	bl	80054f4 <strcpy>
        lcd_set_cursor(1, 0);
 80012bc:	2100      	movs	r1, #0
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fb74 	bl	80019ac <lcd_set_cursor>
        lcd_write_string(text);
 80012c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fc04 	bl	8001ad6 <lcd_write_string>

        switch (cont)//Temperatura da agua de acordo com a selecao do usuario
 80012ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d00a      	beq.n	80012ea <capsulaInserida+0x1da>
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d00e      	beq.n	80012f6 <capsulaInserida+0x1e6>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d000      	beq.n	80012de <capsulaInserida+0x1ce>
          CAPSULA.tipoAgua = AGUA_GELADA;
          CAPSULA.temperaturaAgua = 15;
          break;

        default:
          break;
 80012dc:	e011      	b.n	8001302 <capsulaInserida+0x1f2>
          CAPSULA.tipoAgua = AGUA_QUENTE;
 80012de:	2302      	movs	r3, #2
 80012e0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
          CAPSULA.temperaturaAgua = 60;
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 80012e8:	e00b      	b.n	8001302 <capsulaInserida+0x1f2>
          CAPSULA.tipoAgua = AGUA_NATURAL;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
          CAPSULA.temperaturaAgua = 30;
 80012f0:	231e      	movs	r3, #30
 80012f2:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 80012f4:	e005      	b.n	8001302 <capsulaInserida+0x1f2>
          CAPSULA.tipoAgua = AGUA_GELADA;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
          CAPSULA.temperaturaAgua = 15;
 80012fc:	230f      	movs	r3, #15
 80012fe:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8001300:	bf00      	nop
        }

        cont++;
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001304:	3301      	adds	r3, #1
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
        if (cont > 2)
 8001308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130a:	2b02      	cmp	r3, #2
 800130c:	dd11      	ble.n	8001332 <capsulaInserida+0x222>
          cont = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
      }

      break;
 8001312:	e00e      	b.n	8001332 <capsulaInserida+0x222>
    case 4:
      iniciarPreparo(CAPSULA);
 8001314:	466c      	mov	r4, sp
 8001316:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001326:	f000 f821 	bl	800136c <iniciarPreparo>
      return 1;
 800132a:	2301      	movs	r3, #1
 800132c:	e00d      	b.n	800134a <capsulaInserida+0x23a>
      break;
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <capsulaInserida+0x224>
      break;
 8001332:	bf00      	nop
      break;
    }


    heartBeat();
 8001334:	f000 fa0c 	bl	8001750 <heartBeat>
  } while (btn != 4 || btn != 1);
 8001338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800133a:	2b04      	cmp	r3, #4
 800133c:	f47f af42 	bne.w	80011c4 <capsulaInserida+0xb4>
 8001340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001342:	2b01      	cmp	r3, #1
 8001344:	f47f af3e 	bne.w	80011c4 <capsulaInserida+0xb4>

  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	374c      	adds	r7, #76	; 0x4c
 800134e:	46bd      	mov	sp, r7
 8001350:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001354:	b004      	add	sp, #16
 8001356:	4770      	bx	lr
 8001358:	08005d00 	.word	0x08005d00
 800135c:	08005d10 	.word	0x08005d10
 8001360:	08005d20 	.word	0x08005d20
 8001364:	08005d30 	.word	0x08005d30
 8001368:	08005d40 	.word	0x08005d40

0800136c <iniciarPreparo>:
/**
  * @brief Inicia o preparo passando a receita da capsula
  * @retval
  */
void iniciarPreparo(Receita CAPSULA)
{
 800136c:	b084      	sub	sp, #16
 800136e:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800137a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  char text[20];

  if (HAL_GPIO_ReadPin(P1_PORT, P1_PIN))
 800137e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001382:	48be      	ldr	r0, [pc, #760]	; (800167c <iniciarPreparo+0x310>)
 8001384:	f002 fce0 	bl	8003d48 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d024      	beq.n	80013d8 <iniciarPreparo+0x6c>
  { //Filtro saturado

    lcd_clear();
 800138e:	f000 fb9b 	bl	8001ac8 <lcd_clear>
    sprintf(text, "ERRO");
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4aba      	ldr	r2, [pc, #744]	; (8001680 <iniciarPreparo+0x314>)
 8001396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139a:	6018      	str	r0, [r3, #0]
 800139c:	3304      	adds	r3, #4
 800139e:	7019      	strb	r1, [r3, #0]
    lcd_set_cursor(0, 0);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 fb02 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fb93 	bl	8001ad6 <lcd_write_string>

    sprintf(text, "Filtro saturado");
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4ab4      	ldr	r2, [pc, #720]	; (8001684 <iniciarPreparo+0x318>)
 80013b4:	461c      	mov	r4, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_set_cursor(1, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2001      	movs	r0, #1
 80013c2:	f000 faf3 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fb84 	bl	8001ad6 <lcd_write_string>

    HAL_Delay(2000);
 80013ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013d2:	f001 fb3d 	bl	8002a50 <HAL_Delay>

    return;
 80013d6:	e1ac      	b.n	8001732 <iniciarPreparo+0x3c6>
  }
  if (HAL_GPIO_ReadPin(P2_PORT, P2_PIN))
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	48a7      	ldr	r0, [pc, #668]	; (800167c <iniciarPreparo+0x310>)
 80013de:	f002 fcb3 	bl	8003d48 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d022      	beq.n	800142e <iniciarPreparo+0xc2>
  { //Cilindo vazio

    lcd_clear();
 80013e8:	f000 fb6e 	bl	8001ac8 <lcd_clear>
    sprintf(text, "ERRO");
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4aa4      	ldr	r2, [pc, #656]	; (8001680 <iniciarPreparo+0x314>)
 80013f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f4:	6018      	str	r0, [r3, #0]
 80013f6:	3304      	adds	r3, #4
 80013f8:	7019      	strb	r1, [r3, #0]
    lcd_set_cursor(0, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 fad5 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fb66 	bl	8001ad6 <lcd_write_string>

    sprintf(text, "CO2 vazio");
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4a9e      	ldr	r2, [pc, #632]	; (8001688 <iniciarPreparo+0x31c>)
 800140e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001410:	c303      	stmia	r3!, {r0, r1}
 8001412:	801a      	strh	r2, [r3, #0]
    lcd_set_cursor(1, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	2001      	movs	r0, #1
 8001418:	f000 fac8 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fb59 	bl	8001ad6 <lcd_write_string>

    HAL_Delay(2000);
 8001424:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001428:	f001 fb12 	bl	8002a50 <HAL_Delay>
    return;
 800142c:	e181      	b.n	8001732 <iniciarPreparo+0x3c6>
  }

  lcd_clear();
 800142e:	f000 fb4b 	bl	8001ac8 <lcd_clear>
  sprintf(text, "Iniciando...");
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4a95      	ldr	r2, [pc, #596]	; (800168c <iniciarPreparo+0x320>)
 8001436:	461c      	mov	r4, r3
 8001438:	4613      	mov	r3, r2
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	c407      	stmia	r4!, {r0, r1, r2}
 800143e:	7023      	strb	r3, [r4, #0]
  lcd_set_cursor(0, 2);
 8001440:	2102      	movs	r1, #2
 8001442:	2000      	movs	r0, #0
 8001444:	f000 fab2 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fb43 	bl	8001ad6 <lcd_write_string>

  pwmBomba();
 8001450:	f7ff fd84 	bl	8000f5c <pwmBomba>

  if (CAPSULA.tipoAgua == AGUA_QUENTE)//Capsula precisa de agua quente, aciona controlador PID
 8001454:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001458:	2b02      	cmp	r3, #2
 800145a:	d104      	bne.n	8001466 <iniciarPreparo+0xfa>
  {
    heaterPID(CAPSULA.temperaturaAgua);
 800145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fe8c 	bl	800217c <heaterPID>
 8001464:	e007      	b.n	8001476 <iniciarPreparo+0x10a>
  }
  else if (CAPSULA.tipoAgua == AGUA_GELADA)//Capsula precisa de agua gelada, aciona controlador PID
 8001466:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <iniciarPreparo+0x10a>
  {
    coolerPID(CAPSULA.temperaturaAgua);
 800146e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001470:	4618      	mov	r0, r3
 8001472:	f000 ff49 	bl	8002308 <coolerPID>
  }

  sprintf(text, "Misturando");
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4a85      	ldr	r2, [pc, #532]	; (8001690 <iniciarPreparo+0x324>)
 800147a:	ca07      	ldmia	r2, {r0, r1, r2}
 800147c:	c303      	stmia	r3!, {r0, r1}
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	3302      	adds	r3, #2
 8001482:	0c12      	lsrs	r2, r2, #16
 8001484:	701a      	strb	r2, [r3, #0]
  lcd_set_cursor(0, 2);
 8001486:	2102      	movs	r1, #2
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fa8f 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fb20 	bl	8001ad6 <lcd_write_string>
  HAL_Delay(1000);
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f001 fad9 	bl	8002a50 <HAL_Delay>

  lcd_clear();
 800149e:	f000 fb13 	bl	8001ac8 <lcd_clear>
  if (CAPSULA.tipoAgua == AGUA_QUENTE)//Capsula precisa de agua quente
 80014a2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d126      	bne.n	80014f8 <iniciarPreparo+0x18c>
  {
    sprintf(text, "%s", "Agua quente");
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4a79      	ldr	r2, [pc, #484]	; (8001694 <iniciarPreparo+0x328>)
 80014ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lcd_set_cursor(0, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fa78 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fb09 	bl	8001ad6 <lcd_write_string>

    HAL_GPIO_WritePin(Y1_PORT, Y1_PIN, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ca:	4873      	ldr	r0, [pc, #460]	; (8001698 <iniciarPreparo+0x32c>)
 80014cc:	f002 fc53 	bl	8003d76 <HAL_GPIO_WritePin>
    HAL_Delay(CAPSULA.tempoAgua * 1000);
 80014d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d2:	4972      	ldr	r1, [pc, #456]	; (800169c <iniciarPreparo+0x330>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb35 	bl	8000b44 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fd1d 	bl	8000f1c <__aeabi_f2uiz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fab3 	bl	8002a50 <HAL_Delay>
    HAL_GPIO_WritePin(Y1_PORT, Y1_PIN, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	4869      	ldr	r0, [pc, #420]	; (8001698 <iniciarPreparo+0x32c>)
 80014f2:	f002 fc40 	bl	8003d76 <HAL_GPIO_WritePin>
 80014f6:	e101      	b.n	80016fc <iniciarPreparo+0x390>
  }
  else if (CAPSULA.tipoAgua == AGUA_GELADA)//Capsula precisa de agua gelada
 80014f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 80d3 	bne.w	80016a8 <iniciarPreparo+0x33c>
  {
    sprintf(text, "%s", "Agua gelada   ");
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4a66      	ldr	r2, [pc, #408]	; (80016a0 <iniciarPreparo+0x334>)
 8001506:	461c      	mov	r4, r3
 8001508:	4613      	mov	r3, r2
 800150a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150c:	c407      	stmia	r4!, {r0, r1, r2}
 800150e:	8023      	strh	r3, [r4, #0]
 8001510:	3402      	adds	r4, #2
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	7023      	strb	r3, [r4, #0]
    lcd_set_cursor(0, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f000 fa47 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fad8 	bl	8001ad6 <lcd_write_string>
    int done = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CAPSULA.tempoCO2 > 0.0)///Capsula precisa de CO2
 800152a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152c:	f04f 0100 	mov.w	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fcc3 	bl	8000ebc <__aeabi_fcmpgt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8085 	beq.w	8001648 <iniciarPreparo+0x2dc>
    {
      long long previousTimeAgua = HAL_GetTick();//Variavel para controlar o tempo da agua
 800153e:	f001 fa7d 	bl	8002a3c <HAL_GetTick>
 8001542:	4603      	mov	r3, r0
 8001544:	f04f 0400 	mov.w	r4, #0
 8001548:	e9c7 3408 	strd	r3, r4, [r7, #32]
      long long previousTimeCO2 = HAL_GetTick();//Variavel para controlar o tempo de CO2
 800154c:	f001 fa76 	bl	8002a3c <HAL_GetTick>
 8001550:	4603      	mov	r3, r0
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	e9c7 3406 	strd	r3, r4, [r7, #24]

      sprintf(text, "CO2");
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <iniciarPreparo+0x338>)
 800155e:	601a      	str	r2, [r3, #0]
      lcd_set_cursor(1, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fa22 	bl	80019ac <lcd_set_cursor>
      lcd_write_string(text);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fab3 	bl	8001ad6 <lcd_write_string>

      HAL_GPIO_WritePin(Y2_PORT, Y2_PIN, 1); //Liga saida de agua gelada
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001576:	4848      	ldr	r0, [pc, #288]	; (8001698 <iniciarPreparo+0x32c>)
 8001578:	f002 fbfd 	bl	8003d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Y4_PORT, Y4_PIN, 1); //Liga saida de agua gelada
 800157c:	2201      	movs	r2, #1
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4845      	ldr	r0, [pc, #276]	; (8001698 <iniciarPreparo+0x32c>)
 8001582:	f002 fbf8 	bl	8003d76 <HAL_GPIO_WritePin>
      do
      {

        if ((HAL_GetTick() - previousTimeAgua) >= CAPSULA.tempoAgua * 1000)//Espera o tempo da agua para desligar a saida
 8001586:	f001 fa59 	bl	8002a3c <HAL_GetTick>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001596:	1ac9      	subs	r1, r1, r3
 8001598:	eb62 0204 	sbc.w	r2, r2, r4
 800159c:	468b      	mov	fp, r1
 800159e:	4694      	mov	ip, r2
 80015a0:	4658      	mov	r0, fp
 80015a2:	4661      	mov	r1, ip
 80015a4:	f7ff fa90 	bl	8000ac8 <__aeabi_l2f>
 80015a8:	4604      	mov	r4, r0
 80015aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ac:	493b      	ldr	r1, [pc, #236]	; (800169c <iniciarPreparo+0x330>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fac8 	bl	8000b44 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fc75 	bl	8000ea8 <__aeabi_fcmpge>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <iniciarPreparo+0x276>
        {
          previousTimeAgua = 2147483647;
 80015c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
          HAL_GPIO_WritePin(Y2_PORT, Y2_PIN, 0);//desliga a saida de agua
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	4830      	ldr	r0, [pc, #192]	; (8001698 <iniciarPreparo+0x32c>)
 80015d8:	f002 fbcd 	bl	8003d76 <HAL_GPIO_WritePin>
          done++;//tempo agua terminado
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	3301      	adds	r3, #1
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if ((HAL_GetTick() - previousTimeCO2) >= CAPSULA.tempoCO2 * 1000)//Espera o tempo de CO2 para desligar a saida
 80015e2:	f001 fa2b 	bl	8002a3c <HAL_GetTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80015f2:	1ac9      	subs	r1, r1, r3
 80015f4:	eb62 0204 	sbc.w	r2, r2, r4
 80015f8:	468b      	mov	fp, r1
 80015fa:	4694      	mov	ip, r2
 80015fc:	4658      	mov	r0, fp
 80015fe:	4661      	mov	r1, ip
 8001600:	f7ff fa62 	bl	8000ac8 <__aeabi_l2f>
 8001604:	4604      	mov	r4, r0
 8001606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001608:	4924      	ldr	r1, [pc, #144]	; (800169c <iniciarPreparo+0x330>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa9a 	bl	8000b44 <__aeabi_fmul>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fc47 	bl	8000ea8 <__aeabi_fcmpge>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <iniciarPreparo+0x2d0>
        {
          previousTimeCO2 = 2147483647;
 8001620:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	e9c7 3406 	strd	r3, r4, [r7, #24]
          HAL_GPIO_WritePin(Y4_PORT, Y4_PIN, 0);//desliga a saida de CO2
 800162c:	2200      	movs	r2, #0
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <iniciarPreparo+0x32c>)
 8001632:	f002 fba0 	bl	8003d76 <HAL_GPIO_WritePin>
          done++;//tempo CO2 terminado
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3301      	adds	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        heartBeat();
 800163c:	f000 f888 	bl	8001750 <heartBeat>
      } while (done < 2);//Sai do loop quando os dois tempos foram atingidos
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b01      	cmp	r3, #1
 8001644:	dd9f      	ble.n	8001586 <iniciarPreparo+0x21a>
 8001646:	e059      	b.n	80016fc <iniciarPreparo+0x390>
    }
    else//Nao precisa de CO2, apenas espera o tempo da agua
    {
      HAL_GPIO_WritePin(Y2_PORT, Y2_PIN, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <iniciarPreparo+0x32c>)
 8001650:	f002 fb91 	bl	8003d76 <HAL_GPIO_WritePin>
      HAL_Delay(CAPSULA.tempoAgua * 1000);
 8001654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001656:	4911      	ldr	r1, [pc, #68]	; (800169c <iniciarPreparo+0x330>)
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fa73 	bl	8000b44 <__aeabi_fmul>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fc5b 	bl	8000f1c <__aeabi_f2uiz>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f001 f9f1 	bl	8002a50 <HAL_Delay>
      HAL_GPIO_WritePin(Y2_PORT, Y2_PIN, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <iniciarPreparo+0x32c>)
 8001676:	f002 fb7e 	bl	8003d76 <HAL_GPIO_WritePin>
 800167a:	e03f      	b.n	80016fc <iniciarPreparo+0x390>
 800167c:	40011000 	.word	0x40011000
 8001680:	08005d50 	.word	0x08005d50
 8001684:	08005d58 	.word	0x08005d58
 8001688:	08005d68 	.word	0x08005d68
 800168c:	08005d74 	.word	0x08005d74
 8001690:	08005d84 	.word	0x08005d84
 8001694:	08005d90 	.word	0x08005d90
 8001698:	40010c00 	.word	0x40010c00
 800169c:	447a0000 	.word	0x447a0000
 80016a0:	08005d9c 	.word	0x08005d9c
 80016a4:	00324f43 	.word	0x00324f43
    }
  }
  else if (CAPSULA.tipoAgua == AGUA_NATURAL) //Capsula precisa de agua natural
 80016a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d125      	bne.n	80016fc <iniciarPreparo+0x390>
  {
    sprintf(text, "%s", "Agua natural ");
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <iniciarPreparo+0x3d4>)
 80016b4:	461c      	mov	r4, r3
 80016b6:	4613      	mov	r3, r2
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	c407      	stmia	r4!, {r0, r1, r2}
 80016bc:	8023      	strh	r3, [r4, #0]
    lcd_set_cursor(0, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f973 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fa04 	bl	8001ad6 <lcd_write_string>

    HAL_GPIO_WritePin(Y3_PORT, Y3_PIN, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <iniciarPreparo+0x3d8>)
 80016d4:	f002 fb4f 	bl	8003d76 <HAL_GPIO_WritePin>
    HAL_Delay(CAPSULA.tempoAgua * 1000);
 80016d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016da:	491b      	ldr	r1, [pc, #108]	; (8001748 <iniciarPreparo+0x3dc>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fa31 	bl	8000b44 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc19 	bl	8000f1c <__aeabi_f2uiz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 f9af 	bl	8002a50 <HAL_Delay>
    HAL_GPIO_WritePin(Y3_PORT, Y3_PIN, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <iniciarPreparo+0x3d8>)
 80016f8:	f002 fb3d 	bl	8003d76 <HAL_GPIO_WritePin>
  }

  lcd_clear();
 80016fc:	f000 f9e4 	bl	8001ac8 <lcd_clear>
  sprintf(text, "Finalizando...");
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <iniciarPreparo+0x3e0>)
 8001704:	461c      	mov	r4, r3
 8001706:	4613      	mov	r3, r2
 8001708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170a:	c407      	stmia	r4!, {r0, r1, r2}
 800170c:	8023      	strh	r3, [r4, #0]
 800170e:	3402      	adds	r4, #2
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	7023      	strb	r3, [r4, #0]
  lcd_set_cursor(1, 2);
 8001714:	2102      	movs	r1, #2
 8001716:	2001      	movs	r0, #1
 8001718:	f000 f948 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f9d9 	bl	8001ad6 <lcd_write_string>
  HAL_Delay(1000);
 8001724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001728:	f001 f992 	bl	8002a50 <HAL_Delay>
  lcd_clear();
 800172c:	f000 f9cc 	bl	8001ac8 <lcd_clear>
  return;
 8001730:	bf00      	nop
}
 8001732:	3730      	adds	r7, #48	; 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 4890 	ldmia.w	sp!, {r4, r7, fp, lr}
 800173a:	b004      	add	sp, #16
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	08005dac 	.word	0x08005dac
 8001744:	40010c00 	.word	0x40010c00
 8001748:	447a0000 	.word	0x447a0000
 800174c:	08005dbc 	.word	0x08005dbc

08001750 <heartBeat>:
/**
  * @brief Pisca o led onboard a cada 300ms
  * @retval
  */
void heartBeat()
{
 8001750:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001754:	af00      	add	r7, sp, #0

	if ((HAL_GetTick() - previousTime) >= 300)
 8001756:	f001 f971 	bl	8002a3c <HAL_GetTick>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <heartBeat+0x54>)
 8001764:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	ebb3 030b 	subs.w	r3, r3, fp
 8001770:	eb64 040c 	sbc.w	r4, r4, ip
 8001774:	f240 112b 	movw	r1, #299	; 0x12b
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4299      	cmp	r1, r3
 800177e:	eb72 0304 	sbcs.w	r3, r2, r4
 8001782:	da0c      	bge.n	800179e <heartBeat+0x4e>
	{
		previousTime = HAL_GetTick();
 8001784:	f001 f95a 	bl	8002a3c <HAL_GetTick>
 8001788:	4603      	mov	r3, r0
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <heartBeat+0x54>)
 8001790:	e9c2 3400 	strd	r3, r4, [r2]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <heartBeat+0x58>)
 800179a:	f002 fb04 	bl	8003da6 <HAL_GPIO_TogglePin>
	}
}
 800179e:	bf00      	nop
 80017a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80017a4:	20000158 	.word	0x20000158
 80017a8:	40011000 	.word	0x40011000

080017ac <lcd_write_data>:
    * @brief  Escreve um caracter no display
    * @param  data: caracter a ser mostrado
    * @retval None
    */
void lcd_write_data(char data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_GPIO_Port, RS, 1); // rs = 1 dados
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017bc:	4839      	ldr	r0, [pc, #228]	; (80018a4 <lcd_write_data+0xf8>)
 80017be:	f002 fada 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2108      	movs	r1, #8
 80017c6:	4838      	ldr	r0, [pc, #224]	; (80018a8 <lcd_write_data+0xfc>)
 80017c8:	f002 fad5 	bl	8003d76 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_GPIO_Port, D7, data & 0x80);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	4832      	ldr	r0, [pc, #200]	; (80018a4 <lcd_write_data+0xf8>)
 80017dc:	f002 facb 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D6, data & 0x40);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ee:	482d      	ldr	r0, [pc, #180]	; (80018a4 <lcd_write_data+0xf8>)
 80017f0:	f002 fac1 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D5, data & 0x20);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001802:	4828      	ldr	r0, [pc, #160]	; (80018a4 <lcd_write_data+0xf8>)
 8001804:	f002 fab7 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D4, data & 0x10);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001816:	4823      	ldr	r0, [pc, #140]	; (80018a4 <lcd_write_data+0xf8>)
 8001818:	f002 faad 	bl	8003d76 <HAL_GPIO_WritePin>

	//Pulso no enable
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2108      	movs	r1, #8
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <lcd_write_data+0xfc>)
 8001822:	f002 faa8 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2108      	movs	r1, #8
 800182a:	481f      	ldr	r0, [pc, #124]	; (80018a8 <lcd_write_data+0xfc>)
 800182c:	f002 faa3 	bl	8003d76 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_GPIO_Port, D7, data & 0x08);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183e:	4819      	ldr	r0, [pc, #100]	; (80018a4 <lcd_write_data+0xf8>)
 8001840:	f002 fa99 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D6, data & 0x04);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001852:	4814      	ldr	r0, [pc, #80]	; (80018a4 <lcd_write_data+0xf8>)
 8001854:	f002 fa8f 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D5, data & 0x02);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <lcd_write_data+0xf8>)
 8001868:	f002 fa85 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D4, data & 0x01);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <lcd_write_data+0xf8>)
 800187c:	f002 fa7b 	bl	8003d76 <HAL_GPIO_WritePin>


	//Pulso no enable
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	2108      	movs	r1, #8
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <lcd_write_data+0xfc>)
 8001886:	f002 fa76 	bl	8003d76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2108      	movs	r1, #8
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <lcd_write_data+0xfc>)
 8001890:	f002 fa71 	bl	8003d76 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001894:	2002      	movs	r0, #2
 8001896:	f001 f8db 	bl	8002a50 <HAL_Delay>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00

080018ac <lcd_write_command>:
  * @param  data: Comando a ser enviado
  * @retval None
  */

void lcd_write_command(char cmd)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_GPIO_Port, RS, 0); //rs=0 comandos
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018bc:	4839      	ldr	r0, [pc, #228]	; (80019a4 <lcd_write_command+0xf8>)
 80018be:	f002 fa5a 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2108      	movs	r1, #8
 80018c6:	4838      	ldr	r0, [pc, #224]	; (80019a8 <lcd_write_command+0xfc>)
 80018c8:	f002 fa55 	bl	8003d76 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_GPIO_Port, D7, cmd & 0x80);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4832      	ldr	r0, [pc, #200]	; (80019a4 <lcd_write_command+0xf8>)
 80018dc:	f002 fa4b 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D6, cmd & 0x40);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ee:	482d      	ldr	r0, [pc, #180]	; (80019a4 <lcd_write_command+0xf8>)
 80018f0:	f002 fa41 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D5, cmd & 0x20);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001902:	4828      	ldr	r0, [pc, #160]	; (80019a4 <lcd_write_command+0xf8>)
 8001904:	f002 fa37 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D4, cmd & 0x10);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001916:	4823      	ldr	r0, [pc, #140]	; (80019a4 <lcd_write_command+0xf8>)
 8001918:	f002 fa2d 	bl	8003d76 <HAL_GPIO_WritePin>

	//Pulso no enable
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	2108      	movs	r1, #8
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <lcd_write_command+0xfc>)
 8001922:	f002 fa28 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2108      	movs	r1, #8
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <lcd_write_command+0xfc>)
 800192c:	f002 fa23 	bl	8003d76 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_GPIO_Port, D7, cmd & 0x08);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193e:	4819      	ldr	r0, [pc, #100]	; (80019a4 <lcd_write_command+0xf8>)
 8001940:	f002 fa19 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D6, cmd & 0x04);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <lcd_write_command+0xf8>)
 8001954:	f002 fa0f 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D5, cmd & 0x02);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001966:	480f      	ldr	r0, [pc, #60]	; (80019a4 <lcd_write_command+0xf8>)
 8001968:	f002 fa05 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D4, cmd & 0x01);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197a:	480a      	ldr	r0, [pc, #40]	; (80019a4 <lcd_write_command+0xf8>)
 800197c:	f002 f9fb 	bl	8003d76 <HAL_GPIO_WritePin>

	//Pulso no enable
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 1);
 8001980:	2201      	movs	r2, #1
 8001982:	2108      	movs	r1, #8
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <lcd_write_command+0xfc>)
 8001986:	f002 f9f6 	bl	8003d76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2108      	movs	r1, #8
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <lcd_write_command+0xfc>)
 8001990:	f002 f9f1 	bl	8003d76 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001994:	2002      	movs	r0, #2
 8001996:	f001 f85b 	bl	8002a50 <HAL_Delay>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00

080019ac <lcd_set_cursor>:
  * @param  row: linha
  * @param  col: coluna
  * @retval None
  */
void lcd_set_cursor(char row, char col)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71bb      	strb	r3, [r7, #6]
	switch (row)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <lcd_set_cursor+0x1c>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <lcd_set_cursor+0x26>
 80019c6:	e009      	b.n	80019dc <lcd_set_cursor+0x30>
	    {
	        case 0:
	            col |= 0x80;
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ce:	71bb      	strb	r3, [r7, #6]
	            break;
 80019d0:	e004      	b.n	80019dc <lcd_set_cursor+0x30>
	        case 1:
	            col |= 0xC0;
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80019d8:	71bb      	strb	r3, [r7, #6]
	            break;
 80019da:	bf00      	nop
	    }
	lcd_write_command (col);
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff64 	bl	80018ac <lcd_write_command>

}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <lcd_write_command_init>:
  * @brief  Funcao usada para inicializar o display
  * @param  cmd: comando
  * @retval None
  */
void lcd_write_command_init(char cmd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_GPIO_Port, D7, cmd & 0x80);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a04:	4817      	ldr	r0, [pc, #92]	; (8001a64 <lcd_write_command_init+0x78>)
 8001a06:	f002 f9b6 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D6, cmd & 0x40);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <lcd_write_command_init+0x78>)
 8001a1a:	f002 f9ac 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D5, cmd & 0x20);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <lcd_write_command_init+0x78>)
 8001a2e:	f002 f9a2 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port, D4, cmd & 0x10);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4808      	ldr	r0, [pc, #32]	; (8001a64 <lcd_write_command_init+0x78>)
 8001a42:	f002 f998 	bl	8003d76 <HAL_GPIO_WritePin>

	//Pulso no enable
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <lcd_write_command_init+0x7c>)
 8001a4c:	f002 f993 	bl	8003d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_Port_EN, EN, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2108      	movs	r1, #8
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <lcd_write_command_init+0x7c>)
 8001a56:	f002 f98e 	bl	8003d76 <HAL_GPIO_WritePin>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <lcd_init>:
/**
  * @brief  Inicia o display
  * @retval None
  */
void lcd_init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

	HAL_Delay(40);
 8001a70:	2028      	movs	r0, #40	; 0x28
 8001a72:	f000 ffed 	bl	8002a50 <HAL_Delay>

	lcd_write_command_init(0x30);
 8001a76:	2030      	movs	r0, #48	; 0x30
 8001a78:	f7ff ffb8 	bl	80019ec <lcd_write_command_init>
	HAL_Delay(5);
 8001a7c:	2005      	movs	r0, #5
 8001a7e:	f000 ffe7 	bl	8002a50 <HAL_Delay>
	lcd_write_command_init(0x30);
 8001a82:	2030      	movs	r0, #48	; 0x30
 8001a84:	f7ff ffb2 	bl	80019ec <lcd_write_command_init>
	HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f000 ffe1 	bl	8002a50 <HAL_Delay>
	lcd_write_command_init(0x30);
 8001a8e:	2030      	movs	r0, #48	; 0x30
 8001a90:	f7ff ffac 	bl	80019ec <lcd_write_command_init>
	HAL_Delay(10);
 8001a94:	200a      	movs	r0, #10
 8001a96:	f000 ffdb 	bl	8002a50 <HAL_Delay>
	lcd_write_command_init(0x20);
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7ff ffa6 	bl	80019ec <lcd_write_command_init>
	HAL_Delay(10);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f000 ffd5 	bl	8002a50 <HAL_Delay>


	lcd_write_command(0x28);  //4 bits, 2 ou mais linhas
 8001aa6:	2028      	movs	r0, #40	; 0x28
 8001aa8:	f7ff ff00 	bl	80018ac <lcd_write_command>
	lcd_write_command(0x08);  // Desliga o display
 8001aac:	2008      	movs	r0, #8
 8001aae:	f7ff fefd 	bl	80018ac <lcd_write_command>
	//lcd_write_command(0x0E); // Liga o display e cursor
	lcd_write_command(0x0C);   // Desliga o cursor
 8001ab2:	200c      	movs	r0, #12
 8001ab4:	f7ff fefa 	bl	80018ac <lcd_write_command>
	lcd_write_command(0x06);   // Cursor para direita quando caracter inserido
 8001ab8:	2006      	movs	r0, #6
 8001aba:	f7ff fef7 	bl	80018ac <lcd_write_command>
	lcd_custom_char(1, character2);
	lcd_custom_char(2, character3);
	lcd_custom_char(0, character4);
	lcd_custom_char(1, character5);*/

	lcd_write_command(0x01); // Limpa a tela
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff fef4 	bl	80018ac <lcd_write_command>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <lcd_clear>:
/**
  * @brief  Limpa o display
  * @retval None
  */
void lcd_clear(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	lcd_write_command(0x01);// Limpa display e cursor em 0x0
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff feed 	bl	80018ac <lcd_write_command>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <lcd_write_string>:
/**
  * @brief  Escreve uma String no display
  * @param  str: string
  * @retval None
  */
void lcd_write_string(char* str){//Nao deu certo
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

	while (*str) {
 8001ade:	e007      	b.n	8001af0 <lcd_write_string+0x1a>
		lcd_write_data(*str);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe61 	bl	80017ac <lcd_write_data>
		str++;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
	while (*str) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f3      	bne.n	8001ae0 <lcd_write_string+0xa>
	}

}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b09e      	sub	sp, #120	; 0x78
 8001b04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f000 ff41 	bl	800298c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 f8cd 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f000 fa65 	bl	8001fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b12:	f000 fa45 	bl	8001fa0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001b16:	f000 f9b9 	bl	8001e8c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001b1a:	f000 f921 	bl	8001d60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001b1e:	485e      	ldr	r0, [pc, #376]	; (8001c98 <main+0x198>)
 8001b20:	f001 fc20 	bl	8003364 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b24:	2100      	movs	r1, #0
 8001b26:	485d      	ldr	r0, [pc, #372]	; (8001c9c <main+0x19c>)
 8001b28:	f002 ff78 	bl	8004a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	485b      	ldr	r0, [pc, #364]	; (8001c9c <main+0x19c>)
 8001b30:	f002 ff74 	bl	8004a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b34:	2108      	movs	r1, #8
 8001b36:	4859      	ldr	r0, [pc, #356]	; (8001c9c <main+0x19c>)
 8001b38:	f002 ff70 	bl	8004a1c <HAL_TIM_PWM_Start>

  Receita semCap = {SEM_CAPSULA, SEM_AGUA, "", 0, 0, 0};
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <main+0x1a0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001b50:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	f8c3 200b 	str.w	r2, [r3, #11]
 8001b60:	2300      	movs	r3, #0
 8001b62:	657b      	str	r3, [r7, #84]	; 0x54
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  Receita capAux = {SEM_CAPSULA, SEM_AGUA, "", 0, 0, 0};
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3020 	strb.w	r3, [r7, #32]
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b7c:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <main+0x1a0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001b84:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	f8c3 200b 	str.w	r2, [r3, #11]
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  int ret = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	667b      	str	r3, [r7, #100]	; 0x64

  lcd_init();
 8001ba8:	f7ff ff60 	bl	8001a6c <lcd_init>
    /* USER CODE BEGIN 3 */

    //HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
    //HAL_ADC_Start_IT(&hadc1);

    contarRelogio();
 8001bac:	f000 fcce 	bl	800254c <contarRelogio>

    Receita capsulaIns = lerSensorCapsulas();
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f9fc 	bl	8000fb0 <lerSensorCapsulas>

    if (capsulaIns.tipoCapsula != SEM_CAPSULA) //Capsula inserida
 8001bb8:	783b      	ldrb	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <main+0xd6>
    {
      capAux = capsulaIns;
 8001bbe:	f107 0420 	add.w	r4, r7, #32
 8001bc2:	463d      	mov	r5, r7
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      tela = TELA_CAPSULA;
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <main+0x1a4>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    }

    int botao = ler_teclado();
 8001bd6:	f000 fe59 	bl	800288c <ler_teclado>
 8001bda:	6638      	str	r0, [r7, #96]	; 0x60
    switch (botao)
 8001bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d002      	beq.n	8001be8 <main+0xe8>
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d00a      	beq.n	8001bfc <main+0xfc>
 8001be6:	e016      	b.n	8001c16 <main+0x116>
    {

    case 2:
      if (capAux.tipoCapsula != SEM_CAPSULA) //Se ja foi inserido alguma capsula pode mudar do relogio para a tela de preparacao
 8001be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00f      	beq.n	8001c10 <main+0x110>
        tela++;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <main+0x1a4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <main+0x1a4>)
 8001bf8:	6013      	str	r3, [r2, #0]
      break;
 8001bfa:	e009      	b.n	8001c10 <main+0x110>
    case 3:
      if (capAux.tipoCapsula != SEM_CAPSULA) //Se ja foi inserido alguma capsula pode mudar do relogio para a tela de preparacao
 8001bfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <main+0x114>
        tela--;
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <main+0x1a4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <main+0x1a4>)
 8001c0c:	6013      	str	r3, [r2, #0]
      break;
 8001c0e:	e001      	b.n	8001c14 <main+0x114>
      break;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <main+0x116>
      break;
 8001c14:	bf00      	nop
    }

    if (tela > TELA_CAPSULA)
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <main+0x1a4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	dd02      	ble.n	8001c24 <main+0x124>
      tela = TELA_RELOGIO;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <main+0x1a4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

    if (tela < TELA_RELOGIO)
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <main+0x1a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da02      	bge.n	8001c32 <main+0x132>
      tela = TELA_CAPSULA;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <main+0x1a4>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]


    switch (tela)
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <main+0x1a4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <main+0x140>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d00c      	beq.n	8001c58 <main+0x158>
      if (ret)
        capAux = semCap;
      break;

    default:
      break;
 8001c3e:	e028      	b.n	8001c92 <main+0x192>
      relogio(capAux);
 8001c40:	466c      	mov	r4, sp
 8001c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c52:	f000 fc21 	bl	8002498 <relogio>
      break;
 8001c56:	e01c      	b.n	8001c92 <main+0x192>
      ret = capsulaInserida(capAux);
 8001c58:	466c      	mov	r4, sp
 8001c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6a:	f7ff fa51 	bl	8001110 <capsulaInserida>
 8001c6e:	6678      	str	r0, [r7, #100]	; 0x64
      tela = TELA_RELOGIO;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <main+0x1a4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
      if (ret)
 8001c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <main+0x190>
        capAux = semCap;
 8001c7c:	f107 0420 	add.w	r4, r7, #32
 8001c80:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8001c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8001c90:	bf00      	nop
    }
    heartBeat();
 8001c92:	f7ff fd5d 	bl	8001750 <heartBeat>
  {
 8001c96:	e789      	b.n	8001bac <main+0xac>
 8001c98:	200001a4 	.word	0x200001a4
 8001c9c:	2000021c 	.word	0x2000021c
 8001ca0:	08005dcc 	.word	0x08005dcc
 8001ca4:	20000160 	.word	0x20000160

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	; 0x50
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb2:	2228      	movs	r2, #40	; 0x28
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fbf4 	bl	80054a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cea:	2302      	movs	r3, #2
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cf4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 f86a 	bl	8003dd8 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d0a:	f000 fbbf 	bl	800248c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2102      	movs	r1, #2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fad4 	bl	80042d8 <HAL_RCC_ClockConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d36:	f000 fba9 	bl	800248c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d42:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fc4e 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d52:	f000 fb9b 	bl	800248c <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d70:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d72:	4a45      	ldr	r2, [pc, #276]	; (8001e88 <MX_ADC1_Init+0x128>)
 8001d74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d8c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d92:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d9e:	4839      	ldr	r0, [pc, #228]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001da0:	f000 fe78 	bl	8002a94 <HAL_ADC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001daa:	f000 fb6f 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001dae:	2303      	movs	r3, #3
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4831      	ldr	r0, [pc, #196]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001dc0:	f001 f8e6 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 fb5f 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	482b      	ldr	r0, [pc, #172]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001dd8:	f001 f8da 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001de2:	f000 fb53 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001de6:	2303      	movs	r3, #3
 8001de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4825      	ldr	r0, [pc, #148]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001df0:	f001 f8ce 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001dfa:	f000 fb47 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	481f      	ldr	r0, [pc, #124]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001e08:	f001 f8c2 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001e12:	f000 fb3b 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e16:	2304      	movs	r3, #4
 8001e18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001e24:	f001 f8b4 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001e2e:	f000 fb2d 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e32:	2306      	movs	r3, #6
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001e3c:	f001 f8a8 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001e46:	f000 fb21 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001e54:	f001 f89c 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001e5e:	f000 fb15 	bl	800248c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001e62:	2308      	movs	r3, #8
 8001e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_ADC1_Init+0x124>)
 8001e6c:	f001 f890 	bl	8002f90 <HAL_ADC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001e76:	f000 fb09 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200001a4 	.word	0x200001a4
 8001e88:	40012400 	.word	0x40012400

08001e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ed2:	22f9      	movs	r2, #249	; 0xf9
 8001ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee2:	482e      	ldr	r0, [pc, #184]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001ee4:	f002 fcf2 	bl	80048cc <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001eee:	f000 facd 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4827      	ldr	r0, [pc, #156]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f00:	f002 feec 	bl	8004cdc <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001f0a:	f000 fabf 	bl	800248c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0e:	4823      	ldr	r0, [pc, #140]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f10:	f002 fd2b 	bl	800496a <HAL_TIM_PWM_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001f1a:	f000 fab7 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481b      	ldr	r0, [pc, #108]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f2e:	f003 fa31 	bl	8005394 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001f38:	f000 faa8 	bl	800248c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3c:	2360      	movs	r3, #96	; 0x60
 8001f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f54:	f002 fe04 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001f5e:	f000 fa95 	bl	800248c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2204      	movs	r2, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f6a:	f002 fdf9 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001f74:	f000 fa8a 	bl	800248c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f80:	f002 fdee 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001f8a:	f000 fa7f 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM2_Init+0x110>)
 8001f90:	f000 fbdc 	bl	800274c <HAL_TIM_MspPostInit>

}
 8001f94:	bf00      	nop
 8001f96:	3738      	adds	r7, #56	; 0x38
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000021c 	.word	0x2000021c

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_DMA_Init+0x38>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <MX_DMA_Init+0x38>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6153      	str	r3, [r2, #20]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_DMA_Init+0x38>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f001 fb41 	bl	800364a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fc8:	200b      	movs	r0, #11
 8001fca:	f001 fb5a 	bl	8003682 <HAL_NVIC_EnableIRQ>

}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <MX_GPIO_Init+0x148>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <MX_GPIO_Init+0x148>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <MX_GPIO_Init+0x148>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <MX_GPIO_Init+0x148>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <MX_GPIO_Init+0x148>)
 800200e:	f043 0320 	orr.w	r3, r3, #32
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <MX_GPIO_Init+0x148>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <MX_GPIO_Init+0x148>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <MX_GPIO_Init+0x148>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <MX_GPIO_Init+0x148>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <MX_GPIO_Init+0x148>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <MX_GPIO_Init+0x148>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <MX_GPIO_Init+0x148>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002056:	4834      	ldr	r0, [pc, #208]	; (8002128 <MX_GPIO_Init+0x14c>)
 8002058:	f001 fe8d 	bl	8003d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5
 800205c:	2200      	movs	r2, #0
 800205e:	f642 31e8 	movw	r1, #11240	; 0x2be8
 8002062:	4832      	ldr	r0, [pc, #200]	; (800212c <MX_GPIO_Init+0x150>)
 8002064:	f001 fe87 	bl	8003d76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 800206e:	4830      	ldr	r0, [pc, #192]	; (8002130 <MX_GPIO_Init+0x154>)
 8002070:	f001 fe81 	bl	8003d76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4619      	mov	r1, r3
 800208c:	4826      	ldr	r0, [pc, #152]	; (8002128 <MX_GPIO_Init+0x14c>)
 800208e:	f001 fd01 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	4820      	ldr	r0, [pc, #128]	; (8002128 <MX_GPIO_Init+0x14c>)
 80020a8:	f001 fcf4 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80020ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80020b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	4619      	mov	r1, r3
 80020c0:	481b      	ldr	r0, [pc, #108]	; (8002130 <MX_GPIO_Init+0x154>)
 80020c2:	f001 fce7 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 80020c6:	f24c 0303 	movw	r3, #49155	; 0xc003
 80020ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4814      	ldr	r0, [pc, #80]	; (800212c <MX_GPIO_Init+0x150>)
 80020dc:	f001 fcda 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 PB3 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5
 80020e0:	f642 33e8 	movw	r3, #11240	; 0x2be8
 80020e4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_GPIO_Init+0x150>)
 80020fa:	f001 fccb 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80020fe:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8002102:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2302      	movs	r3, #2
 800210e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_GPIO_Init+0x154>)
 8002118:	f001 fcbc 	bl	8003a94 <HAL_GPIO_Init>

}
 800211c:	bf00      	nop
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40011000 	.word	0x40011000
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40010800 	.word	0x40010800

08002134 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    adcAvgData += adcData[0];
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_ADC_ConvCpltCallback+0x38>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4413      	add	r3, r2
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002148:	6013      	str	r3, [r2, #0]
    adcAvgDataT2 += adcData[1];
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_ADC_ConvCpltCallback+0x38>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_ADC_ConvCpltCallback+0x40>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_ADC_ConvCpltCallback+0x40>)
 8002156:	6013      	str	r3, [r2, #0]

    contAmostras++;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_ADC_ConvCpltCallback+0x44>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_ADC_ConvCpltCallback+0x44>)
 8002160:	6013      	str	r3, [r2, #0]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	20000268 	.word	0x20000268
 8002170:	20000164 	.word	0x20000164
 8002174:	20000168 	.word	0x20000168
 8002178:	2000016c 	.word	0x2000016c

0800217c <heaterPID>:
/**
  * @brief Controlador PID de aquecimento
  * @retval
  */
void heaterPID(int setPoint)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  char text[20];
  sprintf(text, "Aquecendo agua");
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	4a55      	ldr	r2, [pc, #340]	; (80022e0 <heaterPID+0x164>)
 800218a:	461c      	mov	r4, r3
 800218c:	4613      	mov	r3, r2
 800218e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002190:	c407      	stmia	r4!, {r0, r1, r2}
 8002192:	8023      	strh	r3, [r4, #0]
 8002194:	3402      	adds	r4, #2
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	7023      	strb	r3, [r4, #0]
  lcd_set_cursor(0, 0);
 800219a:	2100      	movs	r1, #0
 800219c:	2000      	movs	r0, #0
 800219e:	f7ff fc05 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc95 	bl	8001ad6 <lcd_write_string>

  double error = 0;
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	f04f 0400 	mov.w	r4, #0
 80021b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  float kp = 3; //  250/90
 80021b8:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <heaterPID+0x168>)
 80021ba:	61fb      	str	r3, [r7, #28]
  do
  {
	  do{

	  		  HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 80021bc:	2202      	movs	r2, #2
 80021be:	494a      	ldr	r1, [pc, #296]	; (80022e8 <heaterPID+0x16c>)
 80021c0:	484a      	ldr	r0, [pc, #296]	; (80022ec <heaterPID+0x170>)
 80021c2:	f000 fdf5 	bl	8002db0 <HAL_ADC_Start_DMA>
	  		  HAL_ADC_Start_IT(&hadc1);
 80021c6:	4849      	ldr	r0, [pc, #292]	; (80022ec <heaterPID+0x170>)
 80021c8:	f000 fd3c 	bl	8002c44 <HAL_ADC_Start_IT>

	 }while (contAmostras < NUMBER_OF_SAMPLES);
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <heaterPID+0x174>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b1f      	cmp	r3, #31
 80021d2:	d9f3      	bls.n	80021bc <heaterPID+0x40>

	  contAmostras = 0;
 80021d4:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <heaterPID+0x174>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
	  adcAvgData /= NUMBER_OF_SAMPLES;
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <heaterPID+0x178>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <heaterPID+0x178>)
 80021e2:	6013      	str	r3, [r2, #0]
	  adcAvgDataT2 /= NUMBER_OF_SAMPLES;
 80021e4:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <heaterPID+0x17c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <heaterPID+0x17c>)
 80021ec:	6013      	str	r3, [r2, #0]
	  T1 = ((adcAvgData - 0) * (100 - 5) / (4096 - 0) + 5);
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <heaterPID+0x178>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	0b1b      	lsrs	r3, r3, #12
 80021fe:	3305      	adds	r3, #5
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fc47 	bl	8000a94 <__aeabi_ui2f>
 8002206:	4602      	mov	r2, r0
 8002208:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <heaterPID+0x180>)
 800220a:	601a      	str	r2, [r3, #0]
	  T2 = ((adcAvgDataT2 - 0) * (100 - 5) / (4096 - 0) + 5);
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <heaterPID+0x17c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	3305      	adds	r3, #5
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fc38 	bl	8000a94 <__aeabi_ui2f>
 8002224:	4602      	mov	r2, r0
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <heaterPID+0x184>)
 8002228:	601a      	str	r2, [r3, #0]
	  adcAvgData = 0;
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <heaterPID+0x178>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
	  adcAvgDataT2 = 0;
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <heaterPID+0x17c>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

    error = setPoint - T1;
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fc30 	bl	8000a9c <__aeabi_i2f>
 800223c:	4602      	mov	r2, r0
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <heaterPID+0x180>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7fe fb73 	bl	8000930 <__aeabi_fsub>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f8e1 	bl	8000414 <__aeabi_f2d>
 8002252:	4603      	mov	r3, r0
 8002254:	460c      	mov	r4, r1
 8002256:	e9c7 3408 	strd	r3, r4, [r7, #32]
    error *= kp; //
 800225a:	69f8      	ldr	r0, [r7, #28]
 800225c:	f7fe f8da 	bl	8000414 <__aeabi_f2d>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	461a      	mov	r2, r3
 8002266:	4623      	mov	r3, r4
 8002268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800226c:	f7fe f92a 	bl	80004c4 <__aeabi_dmul>
 8002270:	4603      	mov	r3, r0
 8002272:	460c      	mov	r4, r1
 8002274:	e9c7 3408 	strd	r3, r4, [r7, #32]

    sprintf(text, "Temp %d Alvo %d", (int)T1, setPoint);
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <heaterPID+0x180>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fe27 	bl	8000ed0 <__aeabi_f2iz>
 8002282:	4602      	mov	r2, r0
 8002284:	f107 0008 	add.w	r0, r7, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	491e      	ldr	r1, [pc, #120]	; (8002304 <heaterPID+0x188>)
 800228c:	f003 f912 	bl	80054b4 <siprintf>
    lcd_set_cursor(1, 0);
 8002290:	2100      	movs	r1, #0
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fb8a 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fc1a 	bl	8001ad6 <lcd_write_string>

    TIM2->CCR2 = error;
 80022a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80022a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022aa:	f7fe fb1d 	bl	80008e8 <__aeabi_d2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	63a3      	str	r3, [r4, #56]	; 0x38
    heartBeat();
 80022b2:	f7ff fa4d 	bl	8001750 <heartBeat>
  } while (T1 <= setPoint);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fbf0 	bl	8000a9c <__aeabi_i2f>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <heaterPID+0x180>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f7fe fdef 	bl	8000ea8 <__aeabi_fcmpge>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af75 	bne.w	80021bc <heaterPID+0x40>
  lcd_clear();
 80022d2:	f7ff fbf9 	bl	8001ac8 <lcd_clear>
}
 80022d6:	bf00      	nop
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	bf00      	nop
 80022e0:	08005ddc 	.word	0x08005ddc
 80022e4:	40400000 	.word	0x40400000
 80022e8:	20000268 	.word	0x20000268
 80022ec:	200001a4 	.word	0x200001a4
 80022f0:	2000016c 	.word	0x2000016c
 80022f4:	20000164 	.word	0x20000164
 80022f8:	20000168 	.word	0x20000168
 80022fc:	20000218 	.word	0x20000218
 8002300:	200001a0 	.word	0x200001a0
 8002304:	08005dec 	.word	0x08005dec

08002308 <coolerPID>:
/**
  * @brief Controlador PID de resfriamento
  * @retval
  */
void coolerPID(int setPoint)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b08b      	sub	sp, #44	; 0x2c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  char text[20];

  double error = 0;
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f04f 0400 	mov.w	r4, #0
 8002318:	e9c7 3408 	strd	r3, r4, [r7, #32]
  float kp = 3; //  250/90
 800231c:	4b51      	ldr	r3, [pc, #324]	; (8002464 <coolerPID+0x15c>)
 800231e:	61fb      	str	r3, [r7, #28]

  sprintf(text, "Resfriando agua");
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	4a50      	ldr	r2, [pc, #320]	; (8002468 <coolerPID+0x160>)
 8002326:	461c      	mov	r4, r3
 8002328:	4613      	mov	r3, r2
 800232a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  lcd_set_cursor(0, 0);
 8002330:	2100      	movs	r1, #0
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff fb3a 	bl	80019ac <lcd_set_cursor>
  lcd_write_string(text);
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fbca 	bl	8001ad6 <lcd_write_string>
  do
  {
	  do{

	  	  		  HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 8002342:	2202      	movs	r2, #2
 8002344:	4949      	ldr	r1, [pc, #292]	; (800246c <coolerPID+0x164>)
 8002346:	484a      	ldr	r0, [pc, #296]	; (8002470 <coolerPID+0x168>)
 8002348:	f000 fd32 	bl	8002db0 <HAL_ADC_Start_DMA>
	  	  		  HAL_ADC_Start_IT(&hadc1);
 800234c:	4848      	ldr	r0, [pc, #288]	; (8002470 <coolerPID+0x168>)
 800234e:	f000 fc79 	bl	8002c44 <HAL_ADC_Start_IT>

	  	 }while (contAmostras < NUMBER_OF_SAMPLES);
 8002352:	4b48      	ldr	r3, [pc, #288]	; (8002474 <coolerPID+0x16c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b1f      	cmp	r3, #31
 8002358:	d9f3      	bls.n	8002342 <coolerPID+0x3a>

	  contAmostras = 0;
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <coolerPID+0x16c>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
	  	  adcAvgData /= NUMBER_OF_SAMPLES;
 8002360:	4b45      	ldr	r3, [pc, #276]	; (8002478 <coolerPID+0x170>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	4a44      	ldr	r2, [pc, #272]	; (8002478 <coolerPID+0x170>)
 8002368:	6013      	str	r3, [r2, #0]
	  	  adcAvgDataT2 /= NUMBER_OF_SAMPLES;
 800236a:	4b44      	ldr	r3, [pc, #272]	; (800247c <coolerPID+0x174>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <coolerPID+0x174>)
 8002372:	6013      	str	r3, [r2, #0]
	  	  T1 = ((adcAvgData - 0) * (100 - 5) / (4096 - 0) + 5);
 8002374:	4b40      	ldr	r3, [pc, #256]	; (8002478 <coolerPID+0x170>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	0b1b      	lsrs	r3, r3, #12
 8002384:	3305      	adds	r3, #5
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fb84 	bl	8000a94 <__aeabi_ui2f>
 800238c:	4602      	mov	r2, r0
 800238e:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <coolerPID+0x178>)
 8002390:	601a      	str	r2, [r3, #0]
	  	  T2 = ((adcAvgDataT2 - 0) * (100 - 5) / (4096 - 0) + 5);
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <coolerPID+0x174>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	0b1b      	lsrs	r3, r3, #12
 80023a2:	3305      	adds	r3, #5
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fb75 	bl	8000a94 <__aeabi_ui2f>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <coolerPID+0x17c>)
 80023ae:	601a      	str	r2, [r3, #0]
	  	  adcAvgData = 0;
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <coolerPID+0x170>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	  	  adcAvgDataT2 = 0;
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <coolerPID+0x174>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

    error = T1 - setPoint;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <coolerPID+0x178>)
 80023be:	681c      	ldr	r4, [r3, #0]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fb6b 	bl	8000a9c <__aeabi_i2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4619      	mov	r1, r3
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7fe fab0 	bl	8000930 <__aeabi_fsub>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f81e 	bl	8000414 <__aeabi_f2d>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
    error *= kp; //
 80023e0:	69f8      	ldr	r0, [r7, #28]
 80023e2:	f7fe f817 	bl	8000414 <__aeabi_f2d>
 80023e6:	4603      	mov	r3, r0
 80023e8:	460c      	mov	r4, r1
 80023ea:	461a      	mov	r2, r3
 80023ec:	4623      	mov	r3, r4
 80023ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023f2:	f7fe f867 	bl	80004c4 <__aeabi_dmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	460c      	mov	r4, r1
 80023fa:	e9c7 3408 	strd	r3, r4, [r7, #32]

    sprintf(text, "Temp %d Alvo %d", (int)T1, setPoint);
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <coolerPID+0x178>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd64 	bl	8000ed0 <__aeabi_f2iz>
 8002408:	4602      	mov	r2, r0
 800240a:	f107 0008 	add.w	r0, r7, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	491d      	ldr	r1, [pc, #116]	; (8002488 <coolerPID+0x180>)
 8002412:	f003 f84f 	bl	80054b4 <siprintf>
    lcd_set_cursor(1, 0);
 8002416:	2100      	movs	r1, #0
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff fac7 	bl	80019ac <lcd_set_cursor>
    lcd_write_string(text);
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fb57 	bl	8001ad6 <lcd_write_string>

    TIM2->CCR3 = error;
 8002428:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800242c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002430:	f7fe fa5a 	bl	80008e8 <__aeabi_d2uiz>
 8002434:	4603      	mov	r3, r0
 8002436:	63e3      	str	r3, [r4, #60]	; 0x3c
    heartBeat();
 8002438:	f7ff f98a 	bl	8001750 <heartBeat>
  } while (T1 >= setPoint);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe fb2d 	bl	8000a9c <__aeabi_i2f>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <coolerPID+0x178>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f7fe fd22 	bl	8000e94 <__aeabi_fcmple>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	f47f af75 	bne.w	8002342 <coolerPID+0x3a>
  lcd_clear();
 8002458:	f7ff fb36 	bl	8001ac8 <lcd_clear>
}
 800245c:	bf00      	nop
 800245e:	372c      	adds	r7, #44	; 0x2c
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}
 8002464:	40400000 	.word	0x40400000
 8002468:	08005dfc 	.word	0x08005dfc
 800246c:	20000268 	.word	0x20000268
 8002470:	200001a4 	.word	0x200001a4
 8002474:	2000016c 	.word	0x2000016c
 8002478:	20000164 	.word	0x20000164
 800247c:	20000168 	.word	0x20000168
 8002480:	20000218 	.word	0x20000218
 8002484:	200001a0 	.word	0x200001a0
 8002488:	08005dec 	.word	0x08005dec

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <relogio>:
/**
  * @brief Exibe tela do relogio
  * @retval
  */
void relogio(Receita capSelected)
{
 8002498:	b084      	sub	sp, #16
 800249a:	b580      	push	{r7, lr}
 800249c:	b088      	sub	sp, #32
 800249e:	af02      	add	r7, sp, #8
 80024a0:	f107 0c20 	add.w	ip, r7, #32
 80024a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char text[20];

	if (seg != segAnt)
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <relogio+0x98>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <relogio+0x9c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d036      	beq.n	8002522 <relogio+0x8a>
	{ //Atualiza o display somente apos mudar os segundos
		segAnt = seg;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <relogio+0x98>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <relogio+0x9c>)
 80024ba:	6013      	str	r3, [r2, #0]

		lcd_clear();
 80024bc:	f7ff fb04 	bl	8001ac8 <lcd_clear>
		sprintf(text, "Relogio");
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <relogio+0xa0>)
 80024c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c8:	e883 0003 	stmia.w	r3, {r0, r1}
		lcd_set_cursor(0, 0);
 80024cc:	2100      	movs	r1, #0
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fa6c 	bl	80019ac <lcd_set_cursor>
		lcd_write_string(text);
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fafd 	bl	8001ad6 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80024dc:	2100      	movs	r1, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fa64 	bl	80019ac <lcd_set_cursor>
		sprintf(text, "%02d:%02d:%02d", hor, min, seg);
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <relogio+0xa4>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <relogio+0xa8>)
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <relogio+0x98>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1d38      	adds	r0, r7, #4
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	460b      	mov	r3, r1
 80024f6:	4913      	ldr	r1, [pc, #76]	; (8002544 <relogio+0xac>)
 80024f8:	f002 ffdc 	bl	80054b4 <siprintf>
		lcd_write_string(text);
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fae9 	bl	8001ad6 <lcd_write_string>

		if (capSelected.tipoCapsula != SEM_CAPSULA)
 8002504:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <relogio+0x8a>
		{
			sprintf(text, "CAP");
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <relogio+0xb0>)
 8002510:	601a      	str	r2, [r3, #0]

			lcd_set_cursor(1, 13);
 8002512:	210d      	movs	r1, #13
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fa49 	bl	80019ac <lcd_set_cursor>
			lcd_write_string(text);
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fada 	bl	8001ad6 <lcd_write_string>
		}
	}
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252c:	b004      	add	sp, #16
 800252e:	4770      	bx	lr
 8002530:	20000178 	.word	0x20000178
 8002534:	200000a0 	.word	0x200000a0
 8002538:	08005e0c 	.word	0x08005e0c
 800253c:	20000170 	.word	0x20000170
 8002540:	20000174 	.word	0x20000174
 8002544:	08005e14 	.word	0x08005e14
 8002548:	00504143 	.word	0x00504143

0800254c <contarRelogio>:
/**
  * @brief Incrementa a contagem do relogio a cada 1 segundo;
  * @retval
  */
void contarRelogio()
{
 800254c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002550:	af00      	add	r7, sp, #0
	//HAL_Delay(1000);

	if ((HAL_GetTick() - previousTime) >= 1000)
 8002552:	f000 fa73 	bl	8002a3c <HAL_GetTick>
 8002556:	4603      	mov	r3, r0
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <contarRelogio+0x84>)
 8002560:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	ebb3 030b 	subs.w	r3, r3, fp
 800256c:	eb64 040c 	sbc.w	r4, r4, ip
 8002570:	f240 31e7 	movw	r1, #999	; 0x3e7
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4299      	cmp	r1, r3
 800257a:	eb72 0304 	sbcs.w	r3, r2, r4
 800257e:	da24      	bge.n	80025ca <contarRelogio+0x7e>
	{
		previousTime = HAL_GetTick();
 8002580:	f000 fa5c 	bl	8002a3c <HAL_GetTick>
 8002584:	4603      	mov	r3, r0
 8002586:	f04f 0400 	mov.w	r4, #0
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <contarRelogio+0x84>)
 800258c:	e9c2 3400 	strd	r3, r4, [r2]
		seg++;
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <contarRelogio+0x88>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <contarRelogio+0x88>)
 8002598:	6013      	str	r3, [r2, #0]
		if (seg > 60)
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <contarRelogio+0x88>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b3c      	cmp	r3, #60	; 0x3c
 80025a0:	dd07      	ble.n	80025b2 <contarRelogio+0x66>
		{
			seg = 0;
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <contarRelogio+0x88>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
			min++;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <contarRelogio+0x8c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <contarRelogio+0x8c>)
 80025b0:	6013      	str	r3, [r2, #0]
		}
		if (min > 60)
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <contarRelogio+0x8c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b3c      	cmp	r3, #60	; 0x3c
 80025b8:	dd07      	ble.n	80025ca <contarRelogio+0x7e>
		{
			min = 0;
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <contarRelogio+0x8c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
			hor++;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <contarRelogio+0x90>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <contarRelogio+0x90>)
 80025c8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80025ca:	bf00      	nop
 80025cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80025d0:	20000180 	.word	0x20000180
 80025d4:	20000178 	.word	0x20000178
 80025d8:	20000174 	.word	0x20000174
 80025dc:	20000170 	.word	0x20000170

080025e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_MspInit+0x5c>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_MspInit+0x5c>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6193      	str	r3, [r2, #24]
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_MspInit+0x5c>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_MspInit+0x5c>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_MspInit+0x5c>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_MspInit+0x5c>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_MspInit+0x60>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_MspInit+0x60>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000

08002644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_ADC_MspInit+0xbc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d149      	bne.n	80026f8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_ADC_MspInit+0xc0>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002694:	2318      	movs	r3, #24
 8002696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002698:	2303      	movs	r3, #3
 800269a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4819      	ldr	r0, [pc, #100]	; (8002708 <HAL_ADC_MspInit+0xc4>)
 80026a4:	f001 f9f6 	bl	8003a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_ADC_MspInit+0xcc>)
 80026ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026de:	f000 ffeb 	bl	80036b8 <HAL_DMA_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80026e8:	f7ff fed0 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026f0:	621a      	str	r2, [r3, #32]
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_ADC_MspInit+0xc8>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f8:	bf00      	nop
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40012400 	.word	0x40012400
 8002704:	40021000 	.word	0x40021000
 8002708:	40010800 	.word	0x40010800
 800270c:	200001d4 	.word	0x200001d4
 8002710:	40020008 	.word	0x40020008

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d10b      	bne.n	800273e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_TIM_Base_MspInit+0x34>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_TIM_Base_MspInit+0x34>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_TIM_Base_MspInit+0x34>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d117      	bne.n	800279c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_TIM_MspPostInit+0x58>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_TIM_MspPostInit+0x58>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_TIM_MspPostInit+0x58>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002784:	2307      	movs	r3, #7
 8002786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2302      	movs	r3, #2
 800278e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <HAL_TIM_MspPostInit+0x5c>)
 8002798:	f001 f97c 	bl	8003a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800

080027ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <HardFault_Handler+0x4>

080027be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <MemManage_Handler+0x4>

080027c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <BusFault_Handler+0x4>

080027ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <UsageFault_Handler+0x4>

080027d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f8:	f000 f90e 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <DMA1_Channel1_IRQHandler+0x10>)
 8002806:	f001 f811 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200001d4 	.word	0x200001d4

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f002 fe04 	bl	8005450 <__errno>
 8002848:	4602      	mov	r2, r0
 800284a:	230c      	movs	r3, #12
 800284c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20005000 	.word	0x20005000
 8002874:	00000400 	.word	0x00000400
 8002878:	20000188 	.word	0x20000188
 800287c:	20000278 	.word	0x20000278

08002880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <ler_teclado>:
  * @retval 3 menu -
  * @retval 4 confirmar
  *
  */
int ler_teclado()
{
 800288c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0

	if ((HAL_GetTick() - previousTime) >= 150)
 8002894:	f000 f8d2 	bl	8002a3c <HAL_GetTick>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <ler_teclado+0xa8>)
 80028a2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80028a6:	460b      	mov	r3, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	ebb3 030b 	subs.w	r3, r3, fp
 80028ae:	eb64 040c 	sbc.w	r4, r4, ip
 80028b2:	2b96      	cmp	r3, #150	; 0x96
 80028b4:	f174 0300 	sbcs.w	r3, r4, #0
 80028b8:	db35      	blt.n	8002926 <ler_teclado+0x9a>
	{
		previousTime = HAL_GetTick();
 80028ba:	f000 f8bf 	bl	8002a3c <HAL_GetTick>
 80028be:	4603      	mov	r3, r0
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <ler_teclado+0xa8>)
 80028c6:	e9c2 3400 	strd	r3, r4, [r2]
		int can = HAL_GPIO_ReadPin(cancel_PORT, cancel_PIN);
 80028ca:	2102      	movs	r1, #2
 80028cc:	481a      	ldr	r0, [pc, #104]	; (8002938 <ler_teclado+0xac>)
 80028ce:	f001 fa3b 	bl	8003d48 <HAL_GPIO_ReadPin>
 80028d2:	4603      	mov	r3, r0
 80028d4:	60fb      	str	r3, [r7, #12]
		int menuInc = HAL_GPIO_ReadPin(menuIncremento_PORT, menuIncremento_PIN);
 80028d6:	2101      	movs	r1, #1
 80028d8:	4817      	ldr	r0, [pc, #92]	; (8002938 <ler_teclado+0xac>)
 80028da:	f001 fa35 	bl	8003d48 <HAL_GPIO_ReadPin>
 80028de:	4603      	mov	r3, r0
 80028e0:	60bb      	str	r3, [r7, #8]
		int menuDec = HAL_GPIO_ReadPin(menuDecremento_PORT, menuDecremento_PIN);
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	4815      	ldr	r0, [pc, #84]	; (800293c <ler_teclado+0xb0>)
 80028e6:	f001 fa2f 	bl	8003d48 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	607b      	str	r3, [r7, #4]
		int conf = HAL_GPIO_ReadPin(confirmar_PORT, confirmar_PIN);
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	4812      	ldr	r0, [pc, #72]	; (800293c <ler_teclado+0xb0>)
 80028f2:	f001 fa29 	bl	8003d48 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	603b      	str	r3, [r7, #0]

		if (can)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <ler_teclado+0x78>
		{
			return 1;
 8002900:	2301      	movs	r3, #1
 8002902:	e011      	b.n	8002928 <ler_teclado+0x9c>
		}

		if (menuInc)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <ler_teclado+0x82>
		{
			return 2;
 800290a:	2302      	movs	r3, #2
 800290c:	e00c      	b.n	8002928 <ler_teclado+0x9c>
		}

		if (menuDec)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <ler_teclado+0x8c>
		{
			return 3;
 8002914:	2303      	movs	r3, #3
 8002916:	e007      	b.n	8002928 <ler_teclado+0x9c>
		}
		if (conf)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <ler_teclado+0x96>
		{
			return 4;
 800291e:	2304      	movs	r3, #4
 8002920:	e002      	b.n	8002928 <ler_teclado+0x9c>
		}

		return 0;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <ler_teclado+0x9c>
	}
	return 0;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002932:	bf00      	nop
 8002934:	20000190 	.word	0x20000190
 8002938:	40010c00 	.word	0x40010c00
 800293c:	40010800 	.word	0x40010800

08002940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002940:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002942:	e003      	b.n	800294c <LoopCopyDataInit>

08002944 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002946:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002948:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800294a:	3104      	adds	r1, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800294c:	480a      	ldr	r0, [pc, #40]	; (8002978 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002950:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002952:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002954:	d3f6      	bcc.n	8002944 <CopyDataInit>
  ldr r2, =_sbss
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002958:	e002      	b.n	8002960 <LoopFillZerobss>

0800295a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800295c:	f842 3b04 	str.w	r3, [r2], #4

08002960 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002962:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002964:	d3f9      	bcc.n	800295a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002966:	f7ff ff8b 	bl	8002880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f002 fd77 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800296e:	f7ff f8c7 	bl	8001b00 <main>
  bx lr
 8002972:	4770      	bx	lr
  ldr r3, =_sidata
 8002974:	08005ea0 	.word	0x08005ea0
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800297c:	20000114 	.word	0x20000114
  ldr r2, =_sbss
 8002980:	20000118 	.word	0x20000118
  ldr r3, = _ebss
 8002984:	20000278 	.word	0x20000278

08002988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>
	...

0800298c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_Init+0x28>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_Init+0x28>)
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 fe49 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fe1a 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe61 	bl	800369e <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 fe29 	bl	800364a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200000a4 	.word	0x200000a4
 8002a10:	200000ac 	.word	0x200000ac
 8002a14:	200000a8 	.word	0x200000a8

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	200000ac 	.word	0x200000ac
 8002a38:	20000270 	.word	0x20000270

08002a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20000270 	.word	0x20000270

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_Delay+0x40>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffe0 	bl	8002a3c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200000ac 	.word	0x200000ac

08002a94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0be      	b.n	8002c34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fdb6 	bl	8002644 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fba3 	bl	8003224 <ADC_ConversionStop_Disable>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8099 	bne.w	8002c22 <HAL_ADC_Init+0x18e>
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8095 	bne.w	8002c22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b00:	f023 0302 	bic.w	r3, r3, #2
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7b1b      	ldrb	r3, [r3, #12]
 8002b1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2c:	d003      	beq.n	8002b36 <HAL_ADC_Init+0xa2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d102      	bne.n	8002b3c <HAL_ADC_Init+0xa8>
 8002b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_Init+0xaa>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7d1b      	ldrb	r3, [r3, #20]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d119      	bne.n	8002b80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7b1b      	ldrb	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	035a      	lsls	r2, r3, #13
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e00b      	b.n	8002b80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_ADC_Init+0x1a8>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb0:	d003      	beq.n	8002bba <HAL_ADC_Init+0x126>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d104      	bne.n	8002bc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_ADC_Init+0x1ac>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bfe:	e018      	b.n	8002c32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f023 0312 	bic.w	r3, r3, #18
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c20:	e007      	b.n	8002c32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c40:	ff1f0efe 	.word	0xff1f0efe

08002c44 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Start_IT+0x1a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0a0      	b.n	8002da0 <HAL_ADC_Start_IT+0x15c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa8a 	bl	8003180 <ADC_Enable>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 808f 	bne.w	8002d96 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a45      	ldr	r2, [pc, #276]	; (8002da8 <HAL_ADC_Start_IT+0x164>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_Start_IT+0x5e>
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_ADC_Start_IT+0x168>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d115      	bne.n	8002cce <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d026      	beq.n	8002d0a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ccc:	e01d      	b.n	8002d0a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a33      	ldr	r2, [pc, #204]	; (8002dac <HAL_ADC_Start_IT+0x168>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Start_IT+0xaa>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_ADC_Start_IT+0x164>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <HAL_ADC_Start_IT+0xc6>
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_ADC_Start_IT+0x168>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f023 0206 	bic.w	r2, r3, #6
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d22:	e002      	b.n	8002d2a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0202 	mvn.w	r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d5a:	d113      	bne.n	8002d84 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_ADC_Start_IT+0x164>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_ADC_Start_IT+0x168>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	e00c      	b.n	8002d9e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40012800 	.word	0x40012800
 8002dac:	40012400 	.word	0x40012400

08002db0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a64      	ldr	r2, [pc, #400]	; (8002f58 <HAL_ADC_Start_DMA+0x1a8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_Start_DMA+0x24>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_ADC_Start_DMA+0x1ac>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d106      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x32>
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <HAL_ADC_Start_DMA+0x1a8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 80b3 	bne.w	8002f48 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x40>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0ae      	b.n	8002f4e <HAL_ADC_Start_DMA+0x19e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f9c1 	bl	8003180 <ADC_Enable>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 809a 	bne.w	8002f3e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <HAL_ADC_Start_DMA+0x1ac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_Start_DMA+0x84>
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_ADC_Start_DMA+0x1a8>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d115      	bne.n	8002e60 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d026      	beq.n	8002e9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5e:	e01d      	b.n	8002e9c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <HAL_ADC_Start_DMA+0x1a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_Start_DMA+0xd0>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_ADC_Start_DMA+0x1ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10d      	bne.n	8002e9c <HAL_ADC_Start_DMA+0xec>
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_ADC_Start_DMA+0x1a8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	f023 0206 	bic.w	r2, r3, #6
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <HAL_ADC_Start_DMA+0x1b0>)
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_ADC_Start_DMA+0x1b4>)
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_ADC_Start_DMA+0x1b8>)
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0202 	mvn.w	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a18      	ldr	r0, [r3, #32]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	334c      	adds	r3, #76	; 0x4c
 8002f00:	4619      	mov	r1, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f000 fc31 	bl	800376c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f18:	d108      	bne.n	8002f2c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f28:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f2a:	e00f      	b.n	8002f4c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f3a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f3c:	e006      	b.n	8002f4c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002f46:	e001      	b.n	8002f4c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40012400 	.word	0x40012400
 8002f5c:	40012800 	.word	0x40012800
 8002f60:	08003299 	.word	0x08003299
 8002f64:	08003315 	.word	0x08003315
 8002f68:	08003331 	.word	0x08003331

08002f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x20>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0dc      	b.n	800316a <HAL_ADC_ConfigChannel+0x1da>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d81c      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b05      	subs	r3, #5
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4019      	ands	r1, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b05      	subs	r3, #5
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff8:	e03c      	b.n	8003074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d81c      	bhi.n	800303c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b23      	subs	r3, #35	; 0x23
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	4019      	ands	r1, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	3b23      	subs	r3, #35	; 0x23
 800302e:	fa00 f203 	lsl.w	r2, r0, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	e01b      	b.n	8003074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	3b41      	subs	r3, #65	; 0x41
 800304e:	221f      	movs	r2, #31
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	4019      	ands	r1, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b41      	subs	r3, #65	; 0x41
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b09      	cmp	r3, #9
 800307a:	d91c      	bls.n	80030b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	3b1e      	subs	r3, #30
 800308e:	2207      	movs	r2, #7
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	4019      	ands	r1, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6898      	ldr	r0, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	3b1e      	subs	r3, #30
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e019      	b.n	80030ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	2207      	movs	r2, #7
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4019      	ands	r1, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6898      	ldr	r0, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d003      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030f6:	2b11      	cmp	r3, #17
 80030f8:	d132      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_ADC_ConfigChannel+0x1e4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d126      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003120:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d11a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_ADC_ConfigChannel+0x1e8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a13      	ldr	r2, [pc, #76]	; (800317c <HAL_ADC_ConfigChannel+0x1ec>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	0c9a      	lsrs	r2, r3, #18
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003140:	e002      	b.n	8003148 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x1b2>
 800314e:	e007      	b.n	8003160 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012400 	.word	0x40012400
 8003178:	200000a4 	.word	0x200000a4
 800317c:	431bde83 	.word	0x431bde83

08003180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d039      	beq.n	8003212 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <ADC_Enable+0x9c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <ADC_Enable+0xa0>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9b      	lsrs	r3, r3, #18
 80031ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031bc:	e002      	b.n	80031c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f9      	bne.n	80031be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ca:	f7ff fc37 	bl	8002a3c <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031d0:	e018      	b.n	8003204 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031d2:	f7ff fc33 	bl	8002a3c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d911      	bls.n	8003204 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d1df      	bne.n	80031d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200000a4 	.word	0x200000a4
 8003220:	431bde83 	.word	0x431bde83

08003224 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d127      	bne.n	800328e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800324e:	f7ff fbf5 	bl	8002a3c <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003254:	e014      	b.n	8003280 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003256:	f7ff fbf1 	bl	8002a3c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d90d      	bls.n	8003280 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e007      	b.n	8003290 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d0e3      	beq.n	8003256 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d127      	bne.n	8003302 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032cc:	d115      	bne.n	80032fa <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d111      	bne.n	80032fa <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7fe ff1a 	bl	8002134 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003300:	e004      	b.n	800330c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe22 	bl	8002f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fe11 	bl	8002f7e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADCEx_Calibration_Start+0x1e>
 800337e:	2302      	movs	r3, #2
 8003380:	e086      	b.n	8003490 <HAL_ADCEx_Calibration_Start+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff4a 	bl	8003224 <ADC_ConversionStop_Disable>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d175      	bne.n	8003486 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033a2:	f023 0302 	bic.w	r3, r3, #2
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_ADCEx_Calibration_Start+0x134>)
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	2002      	movs	r0, #2
 80033b4:	f001 f9ce 	bl	8004754 <HAL_RCCEx_GetPeriphCLKFreq>
 80033b8:	4603      	mov	r3, r0
 80033ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80033be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80033c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80033c2:	e002      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fed5 	bl	8003180 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0208 	orr.w	r2, r2, #8
 80033e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033e6:	f7ff fb29 	bl	8002a3c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033ec:	e014      	b.n	8003418 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033ee:	f7ff fb25 	bl	8002a3c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b0a      	cmp	r3, #10
 80033fa:	d90d      	bls.n	8003418 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f023 0312 	bic.w	r3, r3, #18
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e03b      	b.n	8003490 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e3      	bne.n	80033ee <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0204 	orr.w	r2, r2, #4
 8003434:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003436:	f7ff fb01 	bl	8002a3c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800343c:	e014      	b.n	8003468 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800343e:	f7ff fafd 	bl	8002a3c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b0a      	cmp	r3, #10
 800344a:	d90d      	bls.n	8003468 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f023 0312 	bic.w	r3, r3, #18
 8003454:	f043 0210 	orr.w	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e013      	b.n	8003490 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e3      	bne.n	800343e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	200000a4 	.word	0x200000a4

0800349c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	60d3      	str	r3, [r2, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <__NVIC_GetPriorityGrouping+0x18>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0307 	and.w	r3, r3, #7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	db0b      	blt.n	800352a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4906      	ldr	r1, [pc, #24]	; (8003534 <__NVIC_EnableIRQ+0x34>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2001      	movs	r0, #1
 8003522:	fa00 f202 	lsl.w	r2, r0, r2
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f7ff ff90 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff2d 	bl	800349c <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff42 	bl	80034e4 <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff90 	bl	800358c <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5f 	bl	8003538 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff35 	bl	8003500 <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa2 	bl	80035f0 <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e043      	b.n	8003756 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_DMA_Init+0xa8>)
 80036d6:	4413      	add	r3, r2
 80036d8:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMA_Init+0xac>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_Init+0xb0>)
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003702:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	bffdfff8 	.word	0xbffdfff8
 8003764:	cccccccd 	.word	0xcccccccd
 8003768:	40020000 	.word	0x40020000

0800376c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_DMA_Start_IT+0x20>
 8003788:	2302      	movs	r3, #2
 800378a:	e04a      	b.n	8003822 <HAL_DMA_Start_IT+0xb6>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800379a:	2b01      	cmp	r3, #1
 800379c:	d13a      	bne.n	8003814 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f938 	bl	8003a38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 020e 	orr.w	r2, r2, #14
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e00f      	b.n	8003802 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0204 	bic.w	r2, r2, #4
 80037f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 020a 	orr.w	r2, r2, #10
 8003800:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e005      	b.n	8003820 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2204      	movs	r2, #4
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d04f      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xc8>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_DMA_IRQHandler+0x1f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d029      	beq.n	80038da <HAL_DMA_IRQHandler+0xae>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_DMA_IRQHandler+0x1f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xaa>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_DMA_IRQHandler+0x1f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01a      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xa4>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a62      	ldr	r2, [pc, #392]	; (8003a28 <HAL_DMA_IRQHandler+0x1fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d012      	beq.n	80038ca <HAL_DMA_IRQHandler+0x9e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_DMA_IRQHandler+0x200>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00a      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x98>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5f      	ldr	r2, [pc, #380]	; (8003a30 <HAL_DMA_IRQHandler+0x204>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d102      	bne.n	80038be <HAL_DMA_IRQHandler+0x92>
 80038b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038bc:	e00e      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038c2:	e00b      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038c8:	e008      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ce:	e005      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d4:	e002      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0xb0>
 80038da:	2304      	movs	r3, #4
 80038dc:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <HAL_DMA_IRQHandler+0x208>)
 80038de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8094 	beq.w	8003a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038f2:	e08e      	b.n	8003a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2202      	movs	r2, #2
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d056      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x186>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d051      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020a 	bic.w	r2, r2, #10
 800392a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <HAL_DMA_IRQHandler+0x1f0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d029      	beq.n	8003992 <HAL_DMA_IRQHandler+0x166>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a37      	ldr	r2, [pc, #220]	; (8003a20 <HAL_DMA_IRQHandler+0x1f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d022      	beq.n	800398e <HAL_DMA_IRQHandler+0x162>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <HAL_DMA_IRQHandler+0x1f8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01a      	beq.n	8003988 <HAL_DMA_IRQHandler+0x15c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_DMA_IRQHandler+0x1fc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d012      	beq.n	8003982 <HAL_DMA_IRQHandler+0x156>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <HAL_DMA_IRQHandler+0x200>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00a      	beq.n	800397c <HAL_DMA_IRQHandler+0x150>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <HAL_DMA_IRQHandler+0x204>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d102      	bne.n	8003976 <HAL_DMA_IRQHandler+0x14a>
 8003970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003974:	e00e      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	e00b      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 800397c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003980:	e008      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 8003982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003986:	e005      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 8003988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398c:	e002      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 800398e:	2320      	movs	r3, #32
 8003990:	e000      	b.n	8003994 <HAL_DMA_IRQHandler+0x168>
 8003992:	2302      	movs	r3, #2
 8003994:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <HAL_DMA_IRQHandler+0x208>)
 8003996:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d034      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039b0:	e02f      	b.n	8003a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2208      	movs	r2, #8
 80039b8:	409a      	lsls	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x1e8>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d023      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 020e 	bic.w	r2, r2, #14
 80039da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
    }
  }
  return;
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
}
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40020008 	.word	0x40020008
 8003a20:	4002001c 	.word	0x4002001c
 8003a24:	40020030 	.word	0x40020030
 8003a28:	40020044 	.word	0x40020044
 8003a2c:	40020058 	.word	0x40020058
 8003a30:	4002006c 	.word	0x4002006c
 8003a34:	40020000 	.word	0x40020000

08003a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d108      	bne.n	8003a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a76:	e007      	b.n	8003a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b08b      	sub	sp, #44	; 0x2c
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa6:	e127      	b.n	8003cf8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	f040 8116 	bne.w	8003cf2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b12      	cmp	r3, #18
 8003acc:	d034      	beq.n	8003b38 <HAL_GPIO_Init+0xa4>
 8003ace:	2b12      	cmp	r3, #18
 8003ad0:	d80d      	bhi.n	8003aee <HAL_GPIO_Init+0x5a>
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d02b      	beq.n	8003b2e <HAL_GPIO_Init+0x9a>
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d804      	bhi.n	8003ae4 <HAL_GPIO_Init+0x50>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d031      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d01c      	beq.n	8003b1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ae2:	e048      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d043      	beq.n	8003b70 <HAL_GPIO_Init+0xdc>
 8003ae8:	2b11      	cmp	r3, #17
 8003aea:	d01b      	beq.n	8003b24 <HAL_GPIO_Init+0x90>
          break;
 8003aec:	e043      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003aee:	4a89      	ldr	r2, [pc, #548]	; (8003d14 <HAL_GPIO_Init+0x280>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d026      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
 8003af4:	4a87      	ldr	r2, [pc, #540]	; (8003d14 <HAL_GPIO_Init+0x280>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d806      	bhi.n	8003b08 <HAL_GPIO_Init+0x74>
 8003afa:	4a87      	ldr	r2, [pc, #540]	; (8003d18 <HAL_GPIO_Init+0x284>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d020      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
 8003b00:	4a86      	ldr	r2, [pc, #536]	; (8003d1c <HAL_GPIO_Init+0x288>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
          break;
 8003b06:	e036      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b08:	4a85      	ldr	r2, [pc, #532]	; (8003d20 <HAL_GPIO_Init+0x28c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d019      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
 8003b0e:	4a85      	ldr	r2, [pc, #532]	; (8003d24 <HAL_GPIO_Init+0x290>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d016      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
 8003b14:	4a84      	ldr	r2, [pc, #528]	; (8003d28 <HAL_GPIO_Init+0x294>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0xae>
          break;
 8003b1a:	e02c      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	623b      	str	r3, [r7, #32]
          break;
 8003b22:	e028      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	623b      	str	r3, [r7, #32]
          break;
 8003b2c:	e023      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	3308      	adds	r3, #8
 8003b34:	623b      	str	r3, [r7, #32]
          break;
 8003b36:	e01e      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	623b      	str	r3, [r7, #32]
          break;
 8003b40:	e019      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	623b      	str	r3, [r7, #32]
          break;
 8003b4e:	e012      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b58:	2308      	movs	r3, #8
 8003b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	611a      	str	r2, [r3, #16]
          break;
 8003b62:	e008      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b64:	2308      	movs	r3, #8
 8003b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	615a      	str	r2, [r3, #20]
          break;
 8003b6e:	e002      	b.n	8003b76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
          break;
 8003b74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2bff      	cmp	r3, #255	; 0xff
 8003b7a:	d801      	bhi.n	8003b80 <HAL_GPIO_Init+0xec>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	e001      	b.n	8003b84 <HAL_GPIO_Init+0xf0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d802      	bhi.n	8003b92 <HAL_GPIO_Init+0xfe>
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_Init+0x104>
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	3b08      	subs	r3, #8
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	401a      	ands	r2, r3
 8003baa:	6a39      	ldr	r1, [r7, #32]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8096 	beq.w	8003cf2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_GPIO_Init+0x298>)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_GPIO_Init+0x298>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6193      	str	r3, [r2, #24]
 8003bd2:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_GPIO_Init+0x298>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bde:	4a54      	ldr	r2, [pc, #336]	; (8003d30 <HAL_GPIO_Init+0x29c>)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_GPIO_Init+0x2a0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x19e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <HAL_GPIO_Init+0x2a4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x19a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a49      	ldr	r2, [pc, #292]	; (8003d3c <HAL_GPIO_Init+0x2a8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x196>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a48      	ldr	r2, [pc, #288]	; (8003d40 <HAL_GPIO_Init+0x2ac>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x192>
 8003c22:	2303      	movs	r3, #3
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x1a0>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e004      	b.n	8003c34 <HAL_GPIO_Init+0x1a0>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_Init+0x1a0>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_Init+0x1a0>
 8003c32:	2300      	movs	r3, #0
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c44:	493a      	ldr	r1, [pc, #232]	; (8003d30 <HAL_GPIO_Init+0x29c>)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4938      	ldr	r1, [pc, #224]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
 8003c6a:	e006      	b.n	8003c7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c6c:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	4933      	ldr	r1, [pc, #204]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	492e      	ldr	r1, [pc, #184]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
 8003c92:	e006      	b.n	8003ca2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4929      	ldr	r1, [pc, #164]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4924      	ldr	r1, [pc, #144]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
 8003cba:	e006      	b.n	8003cca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	491f      	ldr	r1, [pc, #124]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	491a      	ldr	r1, [pc, #104]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e006      	b.n	8003cf2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	4915      	ldr	r1, [pc, #84]	; (8003d44 <HAL_GPIO_Init+0x2b0>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f47f aed0 	bne.w	8003aa8 <HAL_GPIO_Init+0x14>
  }
}
 8003d08:	bf00      	nop
 8003d0a:	372c      	adds	r7, #44	; 0x2c
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	10210000 	.word	0x10210000
 8003d18:	10110000 	.word	0x10110000
 8003d1c:	10120000 	.word	0x10120000
 8003d20:	10310000 	.word	0x10310000
 8003d24:	10320000 	.word	0x10320000
 8003d28:	10220000 	.word	0x10220000
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010800 	.word	0x40010800
 8003d38:	40010c00 	.word	0x40010c00
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e001      	b.n	8003d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	807b      	strh	r3, [r7, #2]
 8003d82:	4613      	mov	r3, r2
 8003d84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d86:	787b      	ldrb	r3, [r7, #1]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d92:	e003      	b.n	8003d9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	041a      	lsls	r2, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	611a      	str	r2, [r3, #16]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	041a      	lsls	r2, r3, #16
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43d9      	mvns	r1, r3
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	611a      	str	r2, [r3, #16]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e26c      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8087 	beq.w	8003f06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003df8:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d00c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e04:	4b8f      	ldr	r3, [pc, #572]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d112      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5e>
 8003e10:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d10b      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1e:	4b89      	ldr	r3, [pc, #548]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d06c      	beq.n	8003f04 <HAL_RCC_OscConfig+0x12c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d168      	bne.n	8003f04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e246      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x76>
 8003e40:	4b80      	ldr	r3, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a7f      	ldr	r2, [pc, #508]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e02e      	b.n	8003eac <HAL_RCC_OscConfig+0xd4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e56:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b78      	ldr	r3, [pc, #480]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a77      	ldr	r2, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e01d      	b.n	8003eac <HAL_RCC_OscConfig+0xd4>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0xbc>
 8003e7a:	4b72      	ldr	r3, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a71      	ldr	r2, [pc, #452]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xd4>
 8003e94:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a67      	ldr	r2, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fdc2 	bl	8002a3c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fdbe 	bl	8002a3c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1fa      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xe4>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fdae 	bl	8002a3c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fdaa 	bl	8002a3c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1e6      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	4b53      	ldr	r3, [pc, #332]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x10c>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d063      	beq.n	8003fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f12:	4b4c      	ldr	r3, [pc, #304]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d11c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x18c>
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d116      	bne.n	8003f64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x176>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e1ba      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4939      	ldr	r1, [pc, #228]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	e03a      	b.n	8003fda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fe fd63 	bl	8002a3c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fd5f 	bl	8002a3c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e19b      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4927      	ldr	r1, [pc, #156]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
 8003fac:	e015      	b.n	8003fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fd42 	bl	8002a3c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fd3e 	bl	8002a3c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e17a      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d03a      	beq.n	800405c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d019      	beq.n	8004022 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_RCC_OscConfig+0x274>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fd22 	bl	8002a3c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fe fd1e 	bl	8002a3c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e15a      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_RCC_OscConfig+0x26c>)
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f000 fac6 	bl	80045ac <RCC_Delay>
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_OscConfig+0x274>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004028:	f7fe fd08 	bl	8002a3c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402e:	e00f      	b.n	8004050 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004030:	f7fe fd04 	bl	8002a3c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d908      	bls.n	8004050 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e140      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	42420000 	.word	0x42420000
 800404c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004050:	4b9e      	ldr	r3, [pc, #632]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e9      	bne.n	8004030 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a6 	beq.w	80041b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406e:	4b97      	ldr	r3, [pc, #604]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	4b94      	ldr	r3, [pc, #592]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4a93      	ldr	r2, [pc, #588]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	61d3      	str	r3, [r2, #28]
 8004086:	4b91      	ldr	r3, [pc, #580]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4b8b      	ldr	r3, [pc, #556]	; (80042d0 <HAL_RCC_OscConfig+0x4f8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a8a      	ldr	r2, [pc, #552]	; (80042d0 <HAL_RCC_OscConfig+0x4f8>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ae:	f7fe fcc5 	bl	8002a3c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fe fcc1 	bl	8002a3c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0fd      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_RCC_OscConfig+0x4f8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x312>
 80040dc:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4a7a      	ldr	r2, [pc, #488]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	e02d      	b.n	8004146 <HAL_RCC_OscConfig+0x36e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x334>
 80040f2:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4a75      	ldr	r2, [pc, #468]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6213      	str	r3, [r2, #32]
 80040fe:	4b73      	ldr	r3, [pc, #460]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4a72      	ldr	r2, [pc, #456]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	6213      	str	r3, [r2, #32]
 800410a:	e01c      	b.n	8004146 <HAL_RCC_OscConfig+0x36e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d10c      	bne.n	800412e <HAL_RCC_OscConfig+0x356>
 8004114:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	4a6c      	ldr	r2, [pc, #432]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	6213      	str	r3, [r2, #32]
 8004120:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4a69      	ldr	r2, [pc, #420]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6213      	str	r3, [r2, #32]
 800412c:	e00b      	b.n	8004146 <HAL_RCC_OscConfig+0x36e>
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4a66      	ldr	r2, [pc, #408]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6213      	str	r3, [r2, #32]
 800413a:	4b64      	ldr	r3, [pc, #400]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a63      	ldr	r2, [pc, #396]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fe fc75 	bl	8002a3c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fe fc71 	bl	8002a3c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e0ab      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	4b57      	ldr	r3, [pc, #348]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ee      	beq.n	8004156 <HAL_RCC_OscConfig+0x37e>
 8004178:	e014      	b.n	80041a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fe fc5f 	bl	8002a3c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fe fc5b 	bl	8002a3c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e095      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ee      	bne.n	8004182 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041aa:	4b48      	ldr	r3, [pc, #288]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a47      	ldr	r2, [pc, #284]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8081 	beq.w	80042c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d061      	beq.n	8004290 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d146      	bne.n	8004262 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <HAL_RCC_OscConfig+0x4fc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe fc2f 	bl	8002a3c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fe fc2b 	bl	8002a3c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e067      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f4:	4b35      	ldr	r3, [pc, #212]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004208:	d108      	bne.n	800421c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800420a:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	492d      	ldr	r1, [pc, #180]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a19      	ldr	r1, [r3, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	430b      	orrs	r3, r1
 800422e:	4927      	ldr	r1, [pc, #156]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x4fc>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7fe fbff 	bl	8002a3c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004242:	f7fe fbfb 	bl	8002a3c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e037      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x46a>
 8004260:	e02f      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_RCC_OscConfig+0x4fc>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fe fbe8 	bl	8002a3c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fe fbe4 	bl	8002a3c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e020      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x498>
 800428e:	e018      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e013      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_OscConfig+0x4f4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	42420060 	.word	0x42420060

080042d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0d0      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d910      	bls.n	800431c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b67      	ldr	r3, [pc, #412]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 0207 	bic.w	r2, r3, #7
 8004302:	4965      	ldr	r1, [pc, #404]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0b8      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a58      	ldr	r2, [pc, #352]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800433e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800434c:	4b53      	ldr	r3, [pc, #332]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a52      	ldr	r2, [pc, #328]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004358:	4b50      	ldr	r3, [pc, #320]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	494d      	ldr	r1, [pc, #308]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d040      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	4b47      	ldr	r3, [pc, #284]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d115      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07f      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e073      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e06b      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4936      	ldr	r1, [pc, #216]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fe fb38 	bl	8002a3c <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fe fb34 	bl	8002a3c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e053      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d210      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 0207 	bic.w	r2, r3, #7
 800440e:	4922      	ldr	r1, [pc, #136]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e032      	b.n	800448e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4916      	ldr	r1, [pc, #88]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	490e      	ldr	r1, [pc, #56]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004466:	f000 f821 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 800446a:	4601      	mov	r1, r0
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	fa21 f303 	lsr.w	r3, r1, r3
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fa96 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	08005e4c 	.word	0x08005e4c
 80044a4:	200000a4 	.word	0x200000a4
 80044a8:	200000a8 	.word	0x200000a8

080044ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b490      	push	{r4, r7}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044b2:	4b2a      	ldr	r3, [pc, #168]	; (800455c <HAL_RCC_GetSysClockFreq+0xb0>)
 80044b4:	1d3c      	adds	r4, r7, #4
 80044b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x40>
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x46>
 80044ea:	e02d      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044ec:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ee:	623b      	str	r3, [r7, #32]
      break;
 80044f0:	e02d      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	0c9b      	lsrs	r3, r3, #18
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044fe:	4413      	add	r3, r2
 8004500:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004504:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c5b      	lsrs	r3, r3, #17
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800451e:	4413      	add	r3, r2
 8004520:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004524:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4a0f      	ldr	r2, [pc, #60]	; (8004568 <HAL_RCC_GetSysClockFreq+0xbc>)
 800452a:	fb02 f203 	mul.w	r2, r2, r3
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e004      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_RCC_GetSysClockFreq+0xc0>)
 800453c:	fb02 f303 	mul.w	r3, r2, r3
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	623b      	str	r3, [r7, #32]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCC_GetSysClockFreq+0xbc>)
 800454a:	623b      	str	r3, [r7, #32]
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	6a3b      	ldr	r3, [r7, #32]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bc90      	pop	{r4, r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	08005e24 	.word	0x08005e24
 8004560:	08005e34 	.word	0x08005e34
 8004564:	40021000 	.word	0x40021000
 8004568:	007a1200 	.word	0x007a1200
 800456c:	003d0900 	.word	0x003d0900

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b02      	ldr	r3, [pc, #8]	; (8004580 <HAL_RCC_GetHCLKFreq+0x10>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	200000a4 	.word	0x200000a4

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004588:	f7ff fff2 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 800458c:	4601      	mov	r1, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	0adb      	lsrs	r3, r3, #11
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459a:	5cd3      	ldrb	r3, [r2, r3]
 800459c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08005e5c 	.word	0x08005e5c

080045ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <RCC_Delay+0x34>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <RCC_Delay+0x38>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	0a5b      	lsrs	r3, r3, #9
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045c8:	bf00      	nop
  }
  while (Delay --);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	60fa      	str	r2, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f9      	bne.n	80045c8 <RCC_Delay+0x1c>
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	200000a4 	.word	0x200000a4
 80045e4:	10624dd3 	.word	0x10624dd3

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07d      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004604:	2300      	movs	r3, #0
 8004606:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004608:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
 8004620:	4b49      	ldr	r3, [pc, #292]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d118      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a42      	ldr	r2, [pc, #264]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004648:	f7fe f9f8 	bl	8002a3c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	e008      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fe f9f4 	bl	8002a3c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	; 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e06d      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800466e:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02e      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	429a      	cmp	r2, r3
 800468a:	d027      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004696:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fe f9c3 	bl	8002a3c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fe f9bf 	bl	8002a3c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e036      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ee      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4917      	ldr	r1, [pc, #92]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4904      	ldr	r1, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
 8004750:	42420440 	.word	0x42420440

08004754 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b08d      	sub	sp, #52	; 0x34
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800475c:	4b55      	ldr	r3, [pc, #340]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800475e:	f107 040c 	add.w	r4, r7, #12
 8004762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	2300      	movs	r3, #0
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	2300      	movs	r3, #0
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d07f      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004788:	2b10      	cmp	r3, #16
 800478a:	d002      	beq.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d048      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004790:	e08b      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004792:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004798:	4b48      	ldr	r3, [pc, #288]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d07f      	beq.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	0c9b      	lsrs	r3, r3, #18
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047b0:	4413      	add	r3, r2
 80047b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047b6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d018      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047c2:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	0c5b      	lsrs	r3, r3, #17
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047d0:	4413      	add	r3, r2
 80047d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047e2:	4a37      	ldr	r2, [pc, #220]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	4a33      	ldr	r2, [pc, #204]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480a:	d102      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004810:	e048      	b.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004820:	e040      	b.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004822:	4b26      	ldr	r3, [pc, #152]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004832:	d108      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
 8004844:	e01f      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004850:	d109      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800485e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
 8004864:	e00f      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004870:	d11a      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d014      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800487e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004884:	e010      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004886:	e00f      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004888:	f7ff fe7c 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0b9b      	lsrs	r3, r3, #14
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	3301      	adds	r3, #1
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048a2:	e002      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048a8:	bf00      	nop
    }
  }
  return (frequency);
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3734      	adds	r7, #52	; 0x34
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd90      	pop	{r4, r7, pc}
 80048b4:	08005e38 	.word	0x08005e38
 80048b8:	08005e48 	.word	0x08005e48
 80048bc:	40021000 	.word	0x40021000
 80048c0:	007a1200 	.word	0x007a1200
 80048c4:	003d0900 	.word	0x003d0900
 80048c8:	aaaaaaab 	.word	0xaaaaaaab

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd ff0e 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fa9e 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e041      	b.n	8004a00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f839 	bl	8004a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fa4f 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x24>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x3e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x58>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e05e      	b.n	8004b4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e013      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0x92>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e00b      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fc3c 	bl	800534c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_TIM_PWM_Start+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_TIM_PWM_Start+0x138>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d009      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_TIM_PWM_Start+0x13c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <HAL_TIM_PWM_Start+0x140>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d010      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	e007      	b.n	8004b4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800

08004b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e0ac      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	f200 809f 	bhi.w	8004cc8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004cc9 	.word	0x08004cc9
 8004b98:	08004cc9 	.word	0x08004cc9
 8004b9c:	08004cc9 	.word	0x08004cc9
 8004ba0:	08004c05 	.word	0x08004c05
 8004ba4:	08004cc9 	.word	0x08004cc9
 8004ba8:	08004cc9 	.word	0x08004cc9
 8004bac:	08004cc9 	.word	0x08004cc9
 8004bb0:	08004c47 	.word	0x08004c47
 8004bb4:	08004cc9 	.word	0x08004cc9
 8004bb8:	08004cc9 	.word	0x08004cc9
 8004bbc:	08004cc9 	.word	0x08004cc9
 8004bc0:	08004c87 	.word	0x08004c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f9a0 	bl	8004f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0208 	orr.w	r2, r2, #8
 8004bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6999      	ldr	r1, [r3, #24]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	619a      	str	r2, [r3, #24]
      break;
 8004c02:	e062      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f9e6 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
      break;
 8004c44:	e041      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fa2f 	bl	80050b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0208 	orr.w	r2, r2, #8
 8004c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0204 	bic.w	r2, r2, #4
 8004c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69d9      	ldr	r1, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	61da      	str	r2, [r3, #28]
      break;
 8004c84:	e021      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fa79 	bl	8005184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	021a      	lsls	r2, r3, #8
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	61da      	str	r2, [r3, #28]
      break;
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIM_ConfigClockSource+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0a6      	b.n	8004e42 <HAL_TIM_ConfigClockSource+0x166>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d067      	beq.n	8004dfc <HAL_TIM_ConfigClockSource+0x120>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d80b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x6c>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d073      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0x140>
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d802      	bhi.n	8004d3e <HAL_TIM_ConfigClockSource+0x62>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d06f      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d3c:	e078      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d06c      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0x140>
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d06a      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d46:	e073      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d48:	2b70      	cmp	r3, #112	; 0x70
 8004d4a:	d00d      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0x8c>
 8004d4c:	2b70      	cmp	r3, #112	; 0x70
 8004d4e:	d804      	bhi.n	8004d5a <HAL_TIM_ConfigClockSource+0x7e>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d033      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0xe0>
 8004d54:	2b60      	cmp	r3, #96	; 0x60
 8004d56:	d041      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d58:	e06a      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d066      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x152>
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d017      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d66:	e063      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f000 fac9 	bl	800530e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	609a      	str	r2, [r3, #8]
      break;
 8004d94:	e04c      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6899      	ldr	r1, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f000 fab2 	bl	800530e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db8:	609a      	str	r2, [r3, #8]
      break;
 8004dba:	e039      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f000 fa29 	bl	8005220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2150      	movs	r1, #80	; 0x50
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fa80 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004dda:	e029      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	461a      	mov	r2, r3
 8004dea:	f000 fa47 	bl	800527c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2160      	movs	r1, #96	; 0x60
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fa70 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e019      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f000 fa09 	bl	8005220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa60 	bl	80052da <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e009      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fa57 	bl	80052da <TIM_ITRx_SetConfig>
        break;
 8004e2c:	e000      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <TIM_Base_SetConfig+0xb8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0x30>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0x30>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0xbc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x30>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0xc0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <TIM_Base_SetConfig+0xb8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0x62>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0x62>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <TIM_Base_SetConfig+0xbc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0x62>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <TIM_Base_SetConfig+0xc0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a07      	ldr	r2, [pc, #28]	; (8004f04 <TIM_Base_SetConfig+0xb8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800

08004f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <TIM_OC1_SetConfig+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10c      	bne.n	8004f86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0308 	bic.w	r3, r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <TIM_OC1_SetConfig+0xc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d111      	bne.n	8004fb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40012c00 	.word	0x40012c00

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <TIM_OC2_SetConfig+0xd0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10d      	bne.n	8005058 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <TIM_OC2_SetConfig+0xd0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d113      	bne.n	8005088 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00

080050b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <TIM_OC3_SetConfig+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d10d      	bne.n	800512a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <TIM_OC3_SetConfig+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d113      	bne.n	800515a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00

08005184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <TIM_OC4_SetConfig+0x98>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d109      	bne.n	80051f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00

08005220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 030a 	bic.w	r3, r3, #10
 800525c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0210 	bic.w	r2, r3, #16
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	031b      	lsls	r3, r3, #12
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f043 0307 	orr.w	r3, r3, #7
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	431a      	orrs	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2201      	movs	r2, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1a      	ldr	r2, [r3, #32]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	43db      	mvns	r3, r3
 800536e:	401a      	ands	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e046      	b.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a16      	ldr	r2, [pc, #88]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f8:	d009      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a10      	ldr	r2, [pc, #64]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10c      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4313      	orrs	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800

08005450 <__errno>:
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <__errno+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	200000b0 	.word	0x200000b0

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	2500      	movs	r5, #0
 8005460:	4e0c      	ldr	r6, [pc, #48]	; (8005494 <__libc_init_array+0x38>)
 8005462:	4c0d      	ldr	r4, [pc, #52]	; (8005498 <__libc_init_array+0x3c>)
 8005464:	1ba4      	subs	r4, r4, r6
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	42a5      	cmp	r5, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	f000 fc3c 	bl	8005ce8 <_init>
 8005470:	2500      	movs	r5, #0
 8005472:	4e0a      	ldr	r6, [pc, #40]	; (800549c <__libc_init_array+0x40>)
 8005474:	4c0a      	ldr	r4, [pc, #40]	; (80054a0 <__libc_init_array+0x44>)
 8005476:	1ba4      	subs	r4, r4, r6
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	42a5      	cmp	r5, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005484:	4798      	blx	r3
 8005486:	3501      	adds	r5, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800548e:	4798      	blx	r3
 8005490:	3501      	adds	r5, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08005e98 	.word	0x08005e98
 8005498:	08005e98 	.word	0x08005e98
 800549c:	08005e98 	.word	0x08005e98
 80054a0:	08005e9c 	.word	0x08005e9c

080054a4 <memset>:
 80054a4:	4603      	mov	r3, r0
 80054a6:	4402      	add	r2, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d100      	bne.n	80054ae <memset+0xa>
 80054ac:	4770      	bx	lr
 80054ae:	f803 1b01 	strb.w	r1, [r3], #1
 80054b2:	e7f9      	b.n	80054a8 <memset+0x4>

080054b4 <siprintf>:
 80054b4:	b40e      	push	{r1, r2, r3}
 80054b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054ba:	b500      	push	{lr}
 80054bc:	b09c      	sub	sp, #112	; 0x70
 80054be:	ab1d      	add	r3, sp, #116	; 0x74
 80054c0:	9002      	str	r0, [sp, #8]
 80054c2:	9006      	str	r0, [sp, #24]
 80054c4:	9107      	str	r1, [sp, #28]
 80054c6:	9104      	str	r1, [sp, #16]
 80054c8:	4808      	ldr	r0, [pc, #32]	; (80054ec <siprintf+0x38>)
 80054ca:	4909      	ldr	r1, [pc, #36]	; (80054f0 <siprintf+0x3c>)
 80054cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d0:	9105      	str	r1, [sp, #20]
 80054d2:	6800      	ldr	r0, [r0, #0]
 80054d4:	a902      	add	r1, sp, #8
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	f000 f86e 	bl	80055b8 <_svfiprintf_r>
 80054dc:	2200      	movs	r2, #0
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	b01c      	add	sp, #112	; 0x70
 80054e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e8:	b003      	add	sp, #12
 80054ea:	4770      	bx	lr
 80054ec:	200000b0 	.word	0x200000b0
 80054f0:	ffff0208 	.word	0xffff0208

080054f4 <strcpy>:
 80054f4:	4603      	mov	r3, r0
 80054f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fa:	f803 2b01 	strb.w	r2, [r3], #1
 80054fe:	2a00      	cmp	r2, #0
 8005500:	d1f9      	bne.n	80054f6 <strcpy+0x2>
 8005502:	4770      	bx	lr

08005504 <__ssputs_r>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	688e      	ldr	r6, [r1, #8]
 800550a:	4682      	mov	sl, r0
 800550c:	429e      	cmp	r6, r3
 800550e:	460c      	mov	r4, r1
 8005510:	4690      	mov	r8, r2
 8005512:	4699      	mov	r9, r3
 8005514:	d837      	bhi.n	8005586 <__ssputs_r+0x82>
 8005516:	898a      	ldrh	r2, [r1, #12]
 8005518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800551c:	d031      	beq.n	8005582 <__ssputs_r+0x7e>
 800551e:	2302      	movs	r3, #2
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	6909      	ldr	r1, [r1, #16]
 8005524:	1a6f      	subs	r7, r5, r1
 8005526:	6965      	ldr	r5, [r4, #20]
 8005528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800552c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005530:	f109 0301 	add.w	r3, r9, #1
 8005534:	443b      	add	r3, r7
 8005536:	429d      	cmp	r5, r3
 8005538:	bf38      	it	cc
 800553a:	461d      	movcc	r5, r3
 800553c:	0553      	lsls	r3, r2, #21
 800553e:	d530      	bpl.n	80055a2 <__ssputs_r+0x9e>
 8005540:	4629      	mov	r1, r5
 8005542:	f000 fb37 	bl	8005bb4 <_malloc_r>
 8005546:	4606      	mov	r6, r0
 8005548:	b950      	cbnz	r0, 8005560 <__ssputs_r+0x5c>
 800554a:	230c      	movs	r3, #12
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f8ca 3000 	str.w	r3, [sl]
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005560:	463a      	mov	r2, r7
 8005562:	6921      	ldr	r1, [r4, #16]
 8005564:	f000 fab6 	bl	8005ad4 <memcpy>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	6126      	str	r6, [r4, #16]
 8005576:	443e      	add	r6, r7
 8005578:	6026      	str	r6, [r4, #0]
 800557a:	464e      	mov	r6, r9
 800557c:	6165      	str	r5, [r4, #20]
 800557e:	1bed      	subs	r5, r5, r7
 8005580:	60a5      	str	r5, [r4, #8]
 8005582:	454e      	cmp	r6, r9
 8005584:	d900      	bls.n	8005588 <__ssputs_r+0x84>
 8005586:	464e      	mov	r6, r9
 8005588:	4632      	mov	r2, r6
 800558a:	4641      	mov	r1, r8
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	f000 faac 	bl	8005aea <memmove>
 8005592:	68a3      	ldr	r3, [r4, #8]
 8005594:	2000      	movs	r0, #0
 8005596:	1b9b      	subs	r3, r3, r6
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	441e      	add	r6, r3
 800559e:	6026      	str	r6, [r4, #0]
 80055a0:	e7dc      	b.n	800555c <__ssputs_r+0x58>
 80055a2:	462a      	mov	r2, r5
 80055a4:	f000 fb60 	bl	8005c68 <_realloc_r>
 80055a8:	4606      	mov	r6, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d1e2      	bne.n	8005574 <__ssputs_r+0x70>
 80055ae:	6921      	ldr	r1, [r4, #16]
 80055b0:	4650      	mov	r0, sl
 80055b2:	f000 fab3 	bl	8005b1c <_free_r>
 80055b6:	e7c8      	b.n	800554a <__ssputs_r+0x46>

080055b8 <_svfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	461d      	mov	r5, r3
 80055be:	898b      	ldrh	r3, [r1, #12]
 80055c0:	b09d      	sub	sp, #116	; 0x74
 80055c2:	061f      	lsls	r7, r3, #24
 80055c4:	4680      	mov	r8, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4616      	mov	r6, r2
 80055ca:	d50f      	bpl.n	80055ec <_svfiprintf_r+0x34>
 80055cc:	690b      	ldr	r3, [r1, #16]
 80055ce:	b96b      	cbnz	r3, 80055ec <_svfiprintf_r+0x34>
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	f000 faef 	bl	8005bb4 <_malloc_r>
 80055d6:	6020      	str	r0, [r4, #0]
 80055d8:	6120      	str	r0, [r4, #16]
 80055da:	b928      	cbnz	r0, 80055e8 <_svfiprintf_r+0x30>
 80055dc:	230c      	movs	r3, #12
 80055de:	f8c8 3000 	str.w	r3, [r8]
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	e0c8      	b.n	800577a <_svfiprintf_r+0x1c2>
 80055e8:	2340      	movs	r3, #64	; 0x40
 80055ea:	6163      	str	r3, [r4, #20]
 80055ec:	2300      	movs	r3, #0
 80055ee:	9309      	str	r3, [sp, #36]	; 0x24
 80055f0:	2320      	movs	r3, #32
 80055f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f6:	2330      	movs	r3, #48	; 0x30
 80055f8:	f04f 0b01 	mov.w	fp, #1
 80055fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005600:	9503      	str	r5, [sp, #12]
 8005602:	4637      	mov	r7, r6
 8005604:	463d      	mov	r5, r7
 8005606:	f815 3b01 	ldrb.w	r3, [r5], #1
 800560a:	b10b      	cbz	r3, 8005610 <_svfiprintf_r+0x58>
 800560c:	2b25      	cmp	r3, #37	; 0x25
 800560e:	d13e      	bne.n	800568e <_svfiprintf_r+0xd6>
 8005610:	ebb7 0a06 	subs.w	sl, r7, r6
 8005614:	d00b      	beq.n	800562e <_svfiprintf_r+0x76>
 8005616:	4653      	mov	r3, sl
 8005618:	4632      	mov	r2, r6
 800561a:	4621      	mov	r1, r4
 800561c:	4640      	mov	r0, r8
 800561e:	f7ff ff71 	bl	8005504 <__ssputs_r>
 8005622:	3001      	adds	r0, #1
 8005624:	f000 80a4 	beq.w	8005770 <_svfiprintf_r+0x1b8>
 8005628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562a:	4453      	add	r3, sl
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	783b      	ldrb	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 809d 	beq.w	8005770 <_svfiprintf_r+0x1b8>
 8005636:	2300      	movs	r3, #0
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	9307      	str	r3, [sp, #28]
 8005644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005648:	931a      	str	r3, [sp, #104]	; 0x68
 800564a:	462f      	mov	r7, r5
 800564c:	2205      	movs	r2, #5
 800564e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005652:	4850      	ldr	r0, [pc, #320]	; (8005794 <_svfiprintf_r+0x1dc>)
 8005654:	f000 fa30 	bl	8005ab8 <memchr>
 8005658:	9b04      	ldr	r3, [sp, #16]
 800565a:	b9d0      	cbnz	r0, 8005692 <_svfiprintf_r+0xda>
 800565c:	06d9      	lsls	r1, r3, #27
 800565e:	bf44      	itt	mi
 8005660:	2220      	movmi	r2, #32
 8005662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005666:	071a      	lsls	r2, r3, #28
 8005668:	bf44      	itt	mi
 800566a:	222b      	movmi	r2, #43	; 0x2b
 800566c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005670:	782a      	ldrb	r2, [r5, #0]
 8005672:	2a2a      	cmp	r2, #42	; 0x2a
 8005674:	d015      	beq.n	80056a2 <_svfiprintf_r+0xea>
 8005676:	462f      	mov	r7, r5
 8005678:	2000      	movs	r0, #0
 800567a:	250a      	movs	r5, #10
 800567c:	9a07      	ldr	r2, [sp, #28]
 800567e:	4639      	mov	r1, r7
 8005680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005684:	3b30      	subs	r3, #48	; 0x30
 8005686:	2b09      	cmp	r3, #9
 8005688:	d94d      	bls.n	8005726 <_svfiprintf_r+0x16e>
 800568a:	b1b8      	cbz	r0, 80056bc <_svfiprintf_r+0x104>
 800568c:	e00f      	b.n	80056ae <_svfiprintf_r+0xf6>
 800568e:	462f      	mov	r7, r5
 8005690:	e7b8      	b.n	8005604 <_svfiprintf_r+0x4c>
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <_svfiprintf_r+0x1dc>)
 8005694:	463d      	mov	r5, r7
 8005696:	1a80      	subs	r0, r0, r2
 8005698:	fa0b f000 	lsl.w	r0, fp, r0
 800569c:	4318      	orrs	r0, r3
 800569e:	9004      	str	r0, [sp, #16]
 80056a0:	e7d3      	b.n	800564a <_svfiprintf_r+0x92>
 80056a2:	9a03      	ldr	r2, [sp, #12]
 80056a4:	1d11      	adds	r1, r2, #4
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	9103      	str	r1, [sp, #12]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	db01      	blt.n	80056b2 <_svfiprintf_r+0xfa>
 80056ae:	9207      	str	r2, [sp, #28]
 80056b0:	e004      	b.n	80056bc <_svfiprintf_r+0x104>
 80056b2:	4252      	negs	r2, r2
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	9207      	str	r2, [sp, #28]
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	783b      	ldrb	r3, [r7, #0]
 80056be:	2b2e      	cmp	r3, #46	; 0x2e
 80056c0:	d10c      	bne.n	80056dc <_svfiprintf_r+0x124>
 80056c2:	787b      	ldrb	r3, [r7, #1]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d133      	bne.n	8005730 <_svfiprintf_r+0x178>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	3702      	adds	r7, #2
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	9203      	str	r2, [sp, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfb8      	it	lt
 80056d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	4d2e      	ldr	r5, [pc, #184]	; (8005798 <_svfiprintf_r+0x1e0>)
 80056de:	2203      	movs	r2, #3
 80056e0:	7839      	ldrb	r1, [r7, #0]
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f9e8 	bl	8005ab8 <memchr>
 80056e8:	b138      	cbz	r0, 80056fa <_svfiprintf_r+0x142>
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	1b40      	subs	r0, r0, r5
 80056ee:	fa03 f000 	lsl.w	r0, r3, r0
 80056f2:	9b04      	ldr	r3, [sp, #16]
 80056f4:	3701      	adds	r7, #1
 80056f6:	4303      	orrs	r3, r0
 80056f8:	9304      	str	r3, [sp, #16]
 80056fa:	7839      	ldrb	r1, [r7, #0]
 80056fc:	2206      	movs	r2, #6
 80056fe:	4827      	ldr	r0, [pc, #156]	; (800579c <_svfiprintf_r+0x1e4>)
 8005700:	1c7e      	adds	r6, r7, #1
 8005702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005706:	f000 f9d7 	bl	8005ab8 <memchr>
 800570a:	2800      	cmp	r0, #0
 800570c:	d038      	beq.n	8005780 <_svfiprintf_r+0x1c8>
 800570e:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <_svfiprintf_r+0x1e8>)
 8005710:	bb13      	cbnz	r3, 8005758 <_svfiprintf_r+0x1a0>
 8005712:	9b03      	ldr	r3, [sp, #12]
 8005714:	3307      	adds	r3, #7
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	3308      	adds	r3, #8
 800571c:	9303      	str	r3, [sp, #12]
 800571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005720:	444b      	add	r3, r9
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	e76d      	b.n	8005602 <_svfiprintf_r+0x4a>
 8005726:	fb05 3202 	mla	r2, r5, r2, r3
 800572a:	2001      	movs	r0, #1
 800572c:	460f      	mov	r7, r1
 800572e:	e7a6      	b.n	800567e <_svfiprintf_r+0xc6>
 8005730:	2300      	movs	r3, #0
 8005732:	250a      	movs	r5, #10
 8005734:	4619      	mov	r1, r3
 8005736:	3701      	adds	r7, #1
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	4638      	mov	r0, r7
 800573c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005740:	3a30      	subs	r2, #48	; 0x30
 8005742:	2a09      	cmp	r2, #9
 8005744:	d903      	bls.n	800574e <_svfiprintf_r+0x196>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0c8      	beq.n	80056dc <_svfiprintf_r+0x124>
 800574a:	9105      	str	r1, [sp, #20]
 800574c:	e7c6      	b.n	80056dc <_svfiprintf_r+0x124>
 800574e:	fb05 2101 	mla	r1, r5, r1, r2
 8005752:	2301      	movs	r3, #1
 8005754:	4607      	mov	r7, r0
 8005756:	e7f0      	b.n	800573a <_svfiprintf_r+0x182>
 8005758:	ab03      	add	r3, sp, #12
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	4622      	mov	r2, r4
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <_svfiprintf_r+0x1ec>)
 8005760:	a904      	add	r1, sp, #16
 8005762:	4640      	mov	r0, r8
 8005764:	f3af 8000 	nop.w
 8005768:	f1b0 3fff 	cmp.w	r0, #4294967295
 800576c:	4681      	mov	r9, r0
 800576e:	d1d6      	bne.n	800571e <_svfiprintf_r+0x166>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	065b      	lsls	r3, r3, #25
 8005774:	f53f af35 	bmi.w	80055e2 <_svfiprintf_r+0x2a>
 8005778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577a:	b01d      	add	sp, #116	; 0x74
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	ab03      	add	r3, sp, #12
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4622      	mov	r2, r4
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <_svfiprintf_r+0x1ec>)
 8005788:	a904      	add	r1, sp, #16
 800578a:	4640      	mov	r0, r8
 800578c:	f000 f882 	bl	8005894 <_printf_i>
 8005790:	e7ea      	b.n	8005768 <_svfiprintf_r+0x1b0>
 8005792:	bf00      	nop
 8005794:	08005e64 	.word	0x08005e64
 8005798:	08005e6a 	.word	0x08005e6a
 800579c:	08005e6e 	.word	0x08005e6e
 80057a0:	00000000 	.word	0x00000000
 80057a4:	08005505 	.word	0x08005505

080057a8 <_printf_common>:
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	4691      	mov	r9, r2
 80057ae:	461f      	mov	r7, r3
 80057b0:	688a      	ldr	r2, [r1, #8]
 80057b2:	690b      	ldr	r3, [r1, #16]
 80057b4:	4606      	mov	r6, r0
 80057b6:	4293      	cmp	r3, r2
 80057b8:	bfb8      	it	lt
 80057ba:	4613      	movlt	r3, r2
 80057bc:	f8c9 3000 	str.w	r3, [r9]
 80057c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c4:	460c      	mov	r4, r1
 80057c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057ca:	b112      	cbz	r2, 80057d2 <_printf_common+0x2a>
 80057cc:	3301      	adds	r3, #1
 80057ce:	f8c9 3000 	str.w	r3, [r9]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	0699      	lsls	r1, r3, #26
 80057d6:	bf42      	ittt	mi
 80057d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057dc:	3302      	addmi	r3, #2
 80057de:	f8c9 3000 	strmi.w	r3, [r9]
 80057e2:	6825      	ldr	r5, [r4, #0]
 80057e4:	f015 0506 	ands.w	r5, r5, #6
 80057e8:	d107      	bne.n	80057fa <_printf_common+0x52>
 80057ea:	f104 0a19 	add.w	sl, r4, #25
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	f8d9 2000 	ldr.w	r2, [r9]
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	42ab      	cmp	r3, r5
 80057f8:	dc29      	bgt.n	800584e <_printf_common+0xa6>
 80057fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	3300      	adds	r3, #0
 8005802:	bf18      	it	ne
 8005804:	2301      	movne	r3, #1
 8005806:	0692      	lsls	r2, r2, #26
 8005808:	d42e      	bmi.n	8005868 <_printf_common+0xc0>
 800580a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800580e:	4639      	mov	r1, r7
 8005810:	4630      	mov	r0, r6
 8005812:	47c0      	blx	r8
 8005814:	3001      	adds	r0, #1
 8005816:	d021      	beq.n	800585c <_printf_common+0xb4>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	68e5      	ldr	r5, [r4, #12]
 800581c:	f003 0306 	and.w	r3, r3, #6
 8005820:	2b04      	cmp	r3, #4
 8005822:	bf18      	it	ne
 8005824:	2500      	movne	r5, #0
 8005826:	f8d9 2000 	ldr.w	r2, [r9]
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	bf08      	it	eq
 8005830:	1aad      	subeq	r5, r5, r2
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	6922      	ldr	r2, [r4, #16]
 8005836:	bf08      	it	eq
 8005838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800583c:	4293      	cmp	r3, r2
 800583e:	bfc4      	itt	gt
 8005840:	1a9b      	subgt	r3, r3, r2
 8005842:	18ed      	addgt	r5, r5, r3
 8005844:	341a      	adds	r4, #26
 8005846:	454d      	cmp	r5, r9
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xd8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xb8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4639      	mov	r1, r7
 8005854:	4630      	mov	r0, r6
 8005856:	47c0      	blx	r8
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xbc>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c2      	b.n	80057ee <_printf_common+0x46>
 8005868:	2030      	movs	r0, #48	; 0x30
 800586a:	18e1      	adds	r1, r4, r3
 800586c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005876:	4422      	add	r2, r4
 8005878:	3302      	adds	r3, #2
 800587a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800587e:	e7c4      	b.n	800580a <_printf_common+0x62>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4639      	mov	r1, r7
 8005886:	4630      	mov	r0, r6
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xb4>
 800588e:	f109 0901 	add.w	r9, r9, #1
 8005892:	e7d8      	b.n	8005846 <_printf_common+0x9e>

08005894 <_printf_i>:
 8005894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005898:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800589c:	460c      	mov	r4, r1
 800589e:	7e09      	ldrb	r1, [r1, #24]
 80058a0:	b085      	sub	sp, #20
 80058a2:	296e      	cmp	r1, #110	; 0x6e
 80058a4:	4617      	mov	r7, r2
 80058a6:	4606      	mov	r6, r0
 80058a8:	4698      	mov	r8, r3
 80058aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058ac:	f000 80b3 	beq.w	8005a16 <_printf_i+0x182>
 80058b0:	d822      	bhi.n	80058f8 <_printf_i+0x64>
 80058b2:	2963      	cmp	r1, #99	; 0x63
 80058b4:	d036      	beq.n	8005924 <_printf_i+0x90>
 80058b6:	d80a      	bhi.n	80058ce <_printf_i+0x3a>
 80058b8:	2900      	cmp	r1, #0
 80058ba:	f000 80b9 	beq.w	8005a30 <_printf_i+0x19c>
 80058be:	2958      	cmp	r1, #88	; 0x58
 80058c0:	f000 8083 	beq.w	80059ca <_printf_i+0x136>
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058cc:	e032      	b.n	8005934 <_printf_i+0xa0>
 80058ce:	2964      	cmp	r1, #100	; 0x64
 80058d0:	d001      	beq.n	80058d6 <_printf_i+0x42>
 80058d2:	2969      	cmp	r1, #105	; 0x69
 80058d4:	d1f6      	bne.n	80058c4 <_printf_i+0x30>
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	0605      	lsls	r5, r0, #24
 80058dc:	f103 0104 	add.w	r1, r3, #4
 80058e0:	d52a      	bpl.n	8005938 <_printf_i+0xa4>
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da03      	bge.n	80058f2 <_printf_i+0x5e>
 80058ea:	222d      	movs	r2, #45	; 0x2d
 80058ec:	425b      	negs	r3, r3
 80058ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058f2:	486f      	ldr	r0, [pc, #444]	; (8005ab0 <_printf_i+0x21c>)
 80058f4:	220a      	movs	r2, #10
 80058f6:	e039      	b.n	800596c <_printf_i+0xd8>
 80058f8:	2973      	cmp	r1, #115	; 0x73
 80058fa:	f000 809d 	beq.w	8005a38 <_printf_i+0x1a4>
 80058fe:	d808      	bhi.n	8005912 <_printf_i+0x7e>
 8005900:	296f      	cmp	r1, #111	; 0x6f
 8005902:	d020      	beq.n	8005946 <_printf_i+0xb2>
 8005904:	2970      	cmp	r1, #112	; 0x70
 8005906:	d1dd      	bne.n	80058c4 <_printf_i+0x30>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	f043 0320 	orr.w	r3, r3, #32
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	e003      	b.n	800591a <_printf_i+0x86>
 8005912:	2975      	cmp	r1, #117	; 0x75
 8005914:	d017      	beq.n	8005946 <_printf_i+0xb2>
 8005916:	2978      	cmp	r1, #120	; 0x78
 8005918:	d1d4      	bne.n	80058c4 <_printf_i+0x30>
 800591a:	2378      	movs	r3, #120	; 0x78
 800591c:	4865      	ldr	r0, [pc, #404]	; (8005ab4 <_printf_i+0x220>)
 800591e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005922:	e055      	b.n	80059d0 <_printf_i+0x13c>
 8005924:	6813      	ldr	r3, [r2, #0]
 8005926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592a:	1d19      	adds	r1, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005934:	2301      	movs	r3, #1
 8005936:	e08c      	b.n	8005a52 <_printf_i+0x1be>
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800593e:	6011      	str	r1, [r2, #0]
 8005940:	bf18      	it	ne
 8005942:	b21b      	sxthne	r3, r3
 8005944:	e7cf      	b.n	80058e6 <_printf_i+0x52>
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6010      	str	r0, [r2, #0]
 800594e:	0628      	lsls	r0, r5, #24
 8005950:	d501      	bpl.n	8005956 <_printf_i+0xc2>
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	e002      	b.n	800595c <_printf_i+0xc8>
 8005956:	0668      	lsls	r0, r5, #25
 8005958:	d5fb      	bpl.n	8005952 <_printf_i+0xbe>
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	296f      	cmp	r1, #111	; 0x6f
 800595e:	bf14      	ite	ne
 8005960:	220a      	movne	r2, #10
 8005962:	2208      	moveq	r2, #8
 8005964:	4852      	ldr	r0, [pc, #328]	; (8005ab0 <_printf_i+0x21c>)
 8005966:	2100      	movs	r1, #0
 8005968:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800596c:	6865      	ldr	r5, [r4, #4]
 800596e:	2d00      	cmp	r5, #0
 8005970:	60a5      	str	r5, [r4, #8]
 8005972:	f2c0 8095 	blt.w	8005aa0 <_printf_i+0x20c>
 8005976:	6821      	ldr	r1, [r4, #0]
 8005978:	f021 0104 	bic.w	r1, r1, #4
 800597c:	6021      	str	r1, [r4, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d13d      	bne.n	80059fe <_printf_i+0x16a>
 8005982:	2d00      	cmp	r5, #0
 8005984:	f040 808e 	bne.w	8005aa4 <_printf_i+0x210>
 8005988:	4665      	mov	r5, ip
 800598a:	2a08      	cmp	r2, #8
 800598c:	d10b      	bne.n	80059a6 <_printf_i+0x112>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	07db      	lsls	r3, r3, #31
 8005992:	d508      	bpl.n	80059a6 <_printf_i+0x112>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	bfde      	ittt	le
 800599c:	2330      	movle	r3, #48	; 0x30
 800599e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059a6:	ebac 0305 	sub.w	r3, ip, r5
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	f8cd 8000 	str.w	r8, [sp]
 80059b0:	463b      	mov	r3, r7
 80059b2:	aa03      	add	r2, sp, #12
 80059b4:	4621      	mov	r1, r4
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7ff fef6 	bl	80057a8 <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	d14d      	bne.n	8005a5c <_printf_i+0x1c8>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	b005      	add	sp, #20
 80059c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ca:	4839      	ldr	r0, [pc, #228]	; (8005ab0 <_printf_i+0x21c>)
 80059cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	1d1d      	adds	r5, r3, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6015      	str	r5, [r2, #0]
 80059da:	060a      	lsls	r2, r1, #24
 80059dc:	d50b      	bpl.n	80059f6 <_printf_i+0x162>
 80059de:	07ca      	lsls	r2, r1, #31
 80059e0:	bf44      	itt	mi
 80059e2:	f041 0120 	orrmi.w	r1, r1, #32
 80059e6:	6021      	strmi	r1, [r4, #0]
 80059e8:	b91b      	cbnz	r3, 80059f2 <_printf_i+0x15e>
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	f022 0220 	bic.w	r2, r2, #32
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	e7b7      	b.n	8005966 <_printf_i+0xd2>
 80059f6:	064d      	lsls	r5, r1, #25
 80059f8:	bf48      	it	mi
 80059fa:	b29b      	uxthmi	r3, r3
 80059fc:	e7ef      	b.n	80059de <_printf_i+0x14a>
 80059fe:	4665      	mov	r5, ip
 8005a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a04:	fb02 3311 	mls	r3, r2, r1, r3
 8005a08:	5cc3      	ldrb	r3, [r0, r3]
 8005a0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a0e:	460b      	mov	r3, r1
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d1f5      	bne.n	8005a00 <_printf_i+0x16c>
 8005a14:	e7b9      	b.n	800598a <_printf_i+0xf6>
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	1d18      	adds	r0, r3, #4
 8005a1c:	6961      	ldr	r1, [r4, #20]
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	0628      	lsls	r0, r5, #24
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	d501      	bpl.n	8005a2a <_printf_i+0x196>
 8005a26:	6019      	str	r1, [r3, #0]
 8005a28:	e002      	b.n	8005a30 <_printf_i+0x19c>
 8005a2a:	066a      	lsls	r2, r5, #25
 8005a2c:	d5fb      	bpl.n	8005a26 <_printf_i+0x192>
 8005a2e:	8019      	strh	r1, [r3, #0]
 8005a30:	2300      	movs	r3, #0
 8005a32:	4665      	mov	r5, ip
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	e7b9      	b.n	80059ac <_printf_i+0x118>
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	1d19      	adds	r1, r3, #4
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	681d      	ldr	r5, [r3, #0]
 8005a40:	6862      	ldr	r2, [r4, #4]
 8005a42:	2100      	movs	r1, #0
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 f837 	bl	8005ab8 <memchr>
 8005a4a:	b108      	cbz	r0, 8005a50 <_printf_i+0x1bc>
 8005a4c:	1b40      	subs	r0, r0, r5
 8005a4e:	6060      	str	r0, [r4, #4]
 8005a50:	6863      	ldr	r3, [r4, #4]
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	2300      	movs	r3, #0
 8005a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5a:	e7a7      	b.n	80059ac <_printf_i+0x118>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	462a      	mov	r2, r5
 8005a60:	4639      	mov	r1, r7
 8005a62:	4630      	mov	r0, r6
 8005a64:	47c0      	blx	r8
 8005a66:	3001      	adds	r0, #1
 8005a68:	d0aa      	beq.n	80059c0 <_printf_i+0x12c>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	079b      	lsls	r3, r3, #30
 8005a6e:	d413      	bmi.n	8005a98 <_printf_i+0x204>
 8005a70:	68e0      	ldr	r0, [r4, #12]
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	4298      	cmp	r0, r3
 8005a76:	bfb8      	it	lt
 8005a78:	4618      	movlt	r0, r3
 8005a7a:	e7a3      	b.n	80059c4 <_printf_i+0x130>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	464a      	mov	r2, r9
 8005a80:	4639      	mov	r1, r7
 8005a82:	4630      	mov	r0, r6
 8005a84:	47c0      	blx	r8
 8005a86:	3001      	adds	r0, #1
 8005a88:	d09a      	beq.n	80059c0 <_printf_i+0x12c>
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	68e3      	ldr	r3, [r4, #12]
 8005a8e:	9a03      	ldr	r2, [sp, #12]
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	42ab      	cmp	r3, r5
 8005a94:	dcf2      	bgt.n	8005a7c <_printf_i+0x1e8>
 8005a96:	e7eb      	b.n	8005a70 <_printf_i+0x1dc>
 8005a98:	2500      	movs	r5, #0
 8005a9a:	f104 0919 	add.w	r9, r4, #25
 8005a9e:	e7f5      	b.n	8005a8c <_printf_i+0x1f8>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ac      	bne.n	80059fe <_printf_i+0x16a>
 8005aa4:	7803      	ldrb	r3, [r0, #0]
 8005aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aae:	e76c      	b.n	800598a <_printf_i+0xf6>
 8005ab0:	08005e75 	.word	0x08005e75
 8005ab4:	08005e86 	.word	0x08005e86

08005ab8 <memchr>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	b2c9      	uxtb	r1, r1
 8005abc:	4402      	add	r2, r0
 8005abe:	4290      	cmp	r0, r2
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	d101      	bne.n	8005ac8 <memchr+0x10>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e003      	b.n	8005ad0 <memchr+0x18>
 8005ac8:	781c      	ldrb	r4, [r3, #0]
 8005aca:	3001      	adds	r0, #1
 8005acc:	428c      	cmp	r4, r1
 8005ace:	d1f6      	bne.n	8005abe <memchr+0x6>
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <memcpy>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	1e43      	subs	r3, r0, #1
 8005ad8:	440a      	add	r2, r1
 8005ada:	4291      	cmp	r1, r2
 8005adc:	d100      	bne.n	8005ae0 <memcpy+0xc>
 8005ade:	bd10      	pop	{r4, pc}
 8005ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae8:	e7f7      	b.n	8005ada <memcpy+0x6>

08005aea <memmove>:
 8005aea:	4288      	cmp	r0, r1
 8005aec:	b510      	push	{r4, lr}
 8005aee:	eb01 0302 	add.w	r3, r1, r2
 8005af2:	d807      	bhi.n	8005b04 <memmove+0x1a>
 8005af4:	1e42      	subs	r2, r0, #1
 8005af6:	4299      	cmp	r1, r3
 8005af8:	d00a      	beq.n	8005b10 <memmove+0x26>
 8005afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b02:	e7f8      	b.n	8005af6 <memmove+0xc>
 8005b04:	4283      	cmp	r3, r0
 8005b06:	d9f5      	bls.n	8005af4 <memmove+0xa>
 8005b08:	1881      	adds	r1, r0, r2
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	42d3      	cmn	r3, r2
 8005b0e:	d100      	bne.n	8005b12 <memmove+0x28>
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b1a:	e7f7      	b.n	8005b0c <memmove+0x22>

08005b1c <_free_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4605      	mov	r5, r0
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d043      	beq.n	8005bac <_free_r+0x90>
 8005b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b28:	1f0c      	subs	r4, r1, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfb8      	it	lt
 8005b2e:	18e4      	addlt	r4, r4, r3
 8005b30:	f000 f8d0 	bl	8005cd4 <__malloc_lock>
 8005b34:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <_free_r+0x94>)
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	4610      	mov	r0, r2
 8005b3a:	b933      	cbnz	r3, 8005b4a <_free_r+0x2e>
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	6014      	str	r4, [r2, #0]
 8005b40:	4628      	mov	r0, r5
 8005b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b46:	f000 b8c6 	b.w	8005cd6 <__malloc_unlock>
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	d90b      	bls.n	8005b66 <_free_r+0x4a>
 8005b4e:	6821      	ldr	r1, [r4, #0]
 8005b50:	1862      	adds	r2, r4, r1
 8005b52:	4293      	cmp	r3, r2
 8005b54:	bf01      	itttt	eq
 8005b56:	681a      	ldreq	r2, [r3, #0]
 8005b58:	685b      	ldreq	r3, [r3, #4]
 8005b5a:	1852      	addeq	r2, r2, r1
 8005b5c:	6022      	streq	r2, [r4, #0]
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6004      	str	r4, [r0, #0]
 8005b62:	e7ed      	b.n	8005b40 <_free_r+0x24>
 8005b64:	4613      	mov	r3, r2
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	b10a      	cbz	r2, 8005b6e <_free_r+0x52>
 8005b6a:	42a2      	cmp	r2, r4
 8005b6c:	d9fa      	bls.n	8005b64 <_free_r+0x48>
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	1858      	adds	r0, r3, r1
 8005b72:	42a0      	cmp	r0, r4
 8005b74:	d10b      	bne.n	8005b8e <_free_r+0x72>
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	4401      	add	r1, r0
 8005b7a:	1858      	adds	r0, r3, r1
 8005b7c:	4282      	cmp	r2, r0
 8005b7e:	6019      	str	r1, [r3, #0]
 8005b80:	d1de      	bne.n	8005b40 <_free_r+0x24>
 8005b82:	6810      	ldr	r0, [r2, #0]
 8005b84:	6852      	ldr	r2, [r2, #4]
 8005b86:	4401      	add	r1, r0
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e7d8      	b.n	8005b40 <_free_r+0x24>
 8005b8e:	d902      	bls.n	8005b96 <_free_r+0x7a>
 8005b90:	230c      	movs	r3, #12
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	e7d4      	b.n	8005b40 <_free_r+0x24>
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	1821      	adds	r1, r4, r0
 8005b9a:	428a      	cmp	r2, r1
 8005b9c:	bf01      	itttt	eq
 8005b9e:	6811      	ldreq	r1, [r2, #0]
 8005ba0:	6852      	ldreq	r2, [r2, #4]
 8005ba2:	1809      	addeq	r1, r1, r0
 8005ba4:	6021      	streq	r1, [r4, #0]
 8005ba6:	6062      	str	r2, [r4, #4]
 8005ba8:	605c      	str	r4, [r3, #4]
 8005baa:	e7c9      	b.n	8005b40 <_free_r+0x24>
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000198 	.word	0x20000198

08005bb4 <_malloc_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	1ccd      	adds	r5, r1, #3
 8005bb8:	f025 0503 	bic.w	r5, r5, #3
 8005bbc:	3508      	adds	r5, #8
 8005bbe:	2d0c      	cmp	r5, #12
 8005bc0:	bf38      	it	cc
 8005bc2:	250c      	movcc	r5, #12
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	db01      	blt.n	8005bce <_malloc_r+0x1a>
 8005bca:	42a9      	cmp	r1, r5
 8005bcc:	d903      	bls.n	8005bd6 <_malloc_r+0x22>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}
 8005bd6:	f000 f87d 	bl	8005cd4 <__malloc_lock>
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <_malloc_r+0xac>)
 8005bdc:	6814      	ldr	r4, [r2, #0]
 8005bde:	4621      	mov	r1, r4
 8005be0:	b991      	cbnz	r1, 8005c08 <_malloc_r+0x54>
 8005be2:	4c20      	ldr	r4, [pc, #128]	; (8005c64 <_malloc_r+0xb0>)
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	b91b      	cbnz	r3, 8005bf0 <_malloc_r+0x3c>
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f863 	bl	8005cb4 <_sbrk_r>
 8005bee:	6020      	str	r0, [r4, #0]
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f000 f85e 	bl	8005cb4 <_sbrk_r>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d124      	bne.n	8005c46 <_malloc_r+0x92>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	4630      	mov	r0, r6
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	f000 f868 	bl	8005cd6 <__malloc_unlock>
 8005c06:	e7e4      	b.n	8005bd2 <_malloc_r+0x1e>
 8005c08:	680b      	ldr	r3, [r1, #0]
 8005c0a:	1b5b      	subs	r3, r3, r5
 8005c0c:	d418      	bmi.n	8005c40 <_malloc_r+0x8c>
 8005c0e:	2b0b      	cmp	r3, #11
 8005c10:	d90f      	bls.n	8005c32 <_malloc_r+0x7e>
 8005c12:	600b      	str	r3, [r1, #0]
 8005c14:	18cc      	adds	r4, r1, r3
 8005c16:	50cd      	str	r5, [r1, r3]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f85c 	bl	8005cd6 <__malloc_unlock>
 8005c1e:	f104 000b 	add.w	r0, r4, #11
 8005c22:	1d23      	adds	r3, r4, #4
 8005c24:	f020 0007 	bic.w	r0, r0, #7
 8005c28:	1ac3      	subs	r3, r0, r3
 8005c2a:	d0d3      	beq.n	8005bd4 <_malloc_r+0x20>
 8005c2c:	425a      	negs	r2, r3
 8005c2e:	50e2      	str	r2, [r4, r3]
 8005c30:	e7d0      	b.n	8005bd4 <_malloc_r+0x20>
 8005c32:	684b      	ldr	r3, [r1, #4]
 8005c34:	428c      	cmp	r4, r1
 8005c36:	bf16      	itet	ne
 8005c38:	6063      	strne	r3, [r4, #4]
 8005c3a:	6013      	streq	r3, [r2, #0]
 8005c3c:	460c      	movne	r4, r1
 8005c3e:	e7eb      	b.n	8005c18 <_malloc_r+0x64>
 8005c40:	460c      	mov	r4, r1
 8005c42:	6849      	ldr	r1, [r1, #4]
 8005c44:	e7cc      	b.n	8005be0 <_malloc_r+0x2c>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d005      	beq.n	8005c5c <_malloc_r+0xa8>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f82e 	bl	8005cb4 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d0cf      	beq.n	8005bfc <_malloc_r+0x48>
 8005c5c:	6025      	str	r5, [r4, #0]
 8005c5e:	e7db      	b.n	8005c18 <_malloc_r+0x64>
 8005c60:	20000198 	.word	0x20000198
 8005c64:	2000019c 	.word	0x2000019c

08005c68 <_realloc_r>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	460e      	mov	r6, r1
 8005c70:	b921      	cbnz	r1, 8005c7c <_realloc_r+0x14>
 8005c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c76:	4611      	mov	r1, r2
 8005c78:	f7ff bf9c 	b.w	8005bb4 <_malloc_r>
 8005c7c:	b922      	cbnz	r2, 8005c88 <_realloc_r+0x20>
 8005c7e:	f7ff ff4d 	bl	8005b1c <_free_r>
 8005c82:	4625      	mov	r5, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c88:	f000 f826 	bl	8005cd8 <_malloc_usable_size_r>
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	d20f      	bcs.n	8005cb0 <_realloc_r+0x48>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4638      	mov	r0, r7
 8005c94:	f7ff ff8e 	bl	8005bb4 <_malloc_r>
 8005c98:	4605      	mov	r5, r0
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d0f2      	beq.n	8005c84 <_realloc_r+0x1c>
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	f7ff ff17 	bl	8005ad4 <memcpy>
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7ff ff37 	bl	8005b1c <_free_r>
 8005cae:	e7e9      	b.n	8005c84 <_realloc_r+0x1c>
 8005cb0:	4635      	mov	r5, r6
 8005cb2:	e7e7      	b.n	8005c84 <_realloc_r+0x1c>

08005cb4 <_sbrk_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4c05      	ldr	r4, [pc, #20]	; (8005cd0 <_sbrk_r+0x1c>)
 8005cba:	4605      	mov	r5, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	f7fc fda8 	bl	8002814 <_sbrk>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_sbrk_r+0x1a>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_sbrk_r+0x1a>
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20000274 	.word	0x20000274

08005cd4 <__malloc_lock>:
 8005cd4:	4770      	bx	lr

08005cd6 <__malloc_unlock>:
 8005cd6:	4770      	bx	lr

08005cd8 <_malloc_usable_size_r>:
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f18      	subs	r0, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfbc      	itt	lt
 8005ce2:	580b      	ldrlt	r3, [r1, r0]
 8005ce4:	18c0      	addlt	r0, r0, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
